/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 28.12.2024 02:19:05

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0021505267359316349, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 39921, -37798, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00010675621160771698, 0.00011301763879600912, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 77,-41,-52,116,-78,12,-63,79,127,-29,-45,-15,-14,88,-63,42,125,-75,-47,-113,116,86,97,-63,-73,-102,-55,98,5,-111,-12,69, 
  /* [1][0][][] */ 65,86,84,-70,-87,86,-8,18,-40,-25,45,117,127,50,47,-2,-43,3,-66,-98,-86,44,36,122,97,86,-52,-16,117,-114,-127,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0030695863533765078, 0.0032496226485818624, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 373, 419, 433, -199, -103, 466, -436, 417, -448, 411, 434, 381, 428, 424, 453, -322, -467, -454, -317, -389, -272, 432, 223, 431, 449, 417, -357, 483, 148, -396, 675, -372, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.2580661101965234e-05, 4.136587813263759e-05, 4.0274524508276954e-05, 3.8922149542486295e-05, 3.7884867197135463e-05, 3.7583889934467152e-05, 4.0337588870897889e-05, 3.9890957850730047e-05, 4.1148781747324392e-05, 4.182050543022342e-05, 4.1378418245585635e-05, 4.1067509300773963e-05, 4.0634036849951372e-05, 4.1236002289224416e-05, 4.0974911826197058e-05, 4.1003127989824861e-05, 3.7374789826571941e-05, 4.0750954212853685e-05, 4.01041324948892e-05, 4.0898146835388616e-05, 3.9856582588981837e-05, 4.1136328945867717e-05, 4.2751806176966056e-05, 3.8829592085676268e-05, 4.140134115004912e-05, 4.1269810026278719e-05, 4.1677612898638472e-05, 4.1488889110041782e-05, 4.0788469050312415e-05, 3.9553095120936632e-05, 4.2418760131113231e-05, 4.0576403989689425e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-40,106,15,100,-6,-77,-88,45,-89,-96,7,61,-6,-28,59,-45,-22,-73,-45,-64,-101,11,112,-127,14,82,-38,112,6,-14,-71,88,-53,-82,68,-98,-78,-80,35,79,-79,-102,105,56,-117,90,-21,24,-65,-24,96,-64,-39,-86,109,22,73,116,-98,-65,87,-44,53,0,22,76,97,59,97,74,-104,103,-101,47,89,-96,21,-52,20,58,20,80,-4,-59,-37,-77,106,26,95,-26,-101,14,50,36,7, 
  /* [1][0][][] */ -53,42,-63,6,-29,88,47,19,76,-92,-94,114,73,-34,34,74,117,-31,42,127,-40,-6,45,36,27,26,-32,114,20,14,108,-56,69,112,0,37,61,70,-4,-55,-53,15,-21,-87,-26,35,-40,-47,-15,-80,123,65,20,93,-69,-41,34,108,69,91,-48,124,-58,-69,-48,43,86,50,112,36,21,19,-104,102,-40,57,90,-35,-33,60,-70,89,-45,-106,31,124,-60,-56,86,67,84,34,88,74,37,-4, 
  /* [2][0][][] */ 51,47,-54,104,-12,-53,99,106,-103,96,-27,127,100,-23,93,-105,-50,-18,41,65,-90,-15,122,31,-31,90,115,17,-61,90,90,105,-61,-12,-85,-100,-78,105,117,-19,-109,-69,16,3,-77,119,-36,-72,110,43,101,-83,-38,74,31,26,-63,105,-56,13,-8,69,-28,80,102,55,59,97,-88,77,12,-64,42,-66,42,39,-47,-15,13,-2,47,-91,-4,-32,4,-90,-11,-23,99,100,-33,16,-40,-101,-37,-68, 
  /* [3][0][][] */ 76,-2,40,-26,-76,51,-121,39,61,20,67,1,96,105,75,5,107,101,-59,13,121,-90,-71,-123,-6,-121,-88,110,46,-106,90,6,-61,-40,-19,-18,-99,-26,41,49,-29,-99,-95,-2,76,30,-49,-90,69,-86,43,-2,99,28,93,-107,-125,-126,-125,-65,-104,36,-42,76,57,-37,-67,-36,-36,-76,4,104,20,-112,56,-54,31,102,100,-47,-96,-127,59,98,28,46,-48,-125,-85,65,2,-116,103,-83,-98,44, 
  /* [4][0][][] */ 62,106,2,68,-30,-27,30,16,74,100,-10,55,32,-28,-12,-72,-28,-10,-68,11,116,-81,89,29,-15,-1,66,-65,-46,36,-72,-58,75,125,18,-102,-57,-8,-124,49,-57,-69,-59,-99,36,119,51,59,18,-38,-22,-81,-97,43,-91,25,50,-103,32,15,5,-81,-45,-75,-53,61,0,-39,29,-89,-99,-93,-56,22,107,56,64,-23,-9,-42,9,-36,-99,-3,6,71,99,-1,-120,-75,56,49,43,127,-111,-18, 
  /* [5][0][][] */ 109,-90,92,99,53,-117,39,71,110,-116,8,-64,34,98,48,48,76,75,-73,117,42,55,29,-20,-121,-60,-8,-91,62,42,27,-99,-32,11,-66,28,-115,-30,61,33,-87,-48,45,115,-29,24,27,-49,-108,118,36,41,52,28,47,-16,123,63,-50,-35,44,-64,49,-69,-25,118,-19,40,89,10,115,-67,-44,94,-21,-68,18,-41,21,76,125,50,37,127,-87,98,2,50,81,-122,118,107,-14,9,89,-90, 
  /* [6][0][][] */ 15,-51,110,70,-91,-68,-8,59,-4,-87,0,-95,81,70,112,-126,35,-4,-3,97,-83,-118,104,55,-56,-88,-14,-64,-34,-120,41,-84,-94,-127,-52,-110,-15,34,-117,76,82,52,23,-21,-116,106,-82,-49,-89,12,-33,-70,53,-59,91,-31,3,-14,-73,108,-103,-3,64,-78,-58,62,95,-55,73,-10,-92,-11,53,-75,-98,-48,-84,-101,-63,-15,27,-30,40,-32,-72,-89,-46,-102,80,100,110,11,-55,-51,71,-27, 
  /* [7][0][][] */ 123,80,-32,-36,-64,125,-11,9,120,13,-90,25,66,-95,57,85,63,27,6,127,63,36,4,97,-65,114,51,67,-71,118,-11,46,35,34,77,111,-99,100,0,-19,107,-70,90,80,60,-1,100,-107,64,-53,-103,-62,-16,98,26,38,126,-83,13,-50,16,3,91,-106,-62,-48,80,33,-103,29,73,97,95,37,70,71,-58,67,-94,41,102,-32,-11,-66,93,45,-104,105,92,5,86,76,-52,-57,7,-62, 
  /* [8][0][][] */ 5,24,-54,-100,49,18,-85,-32,9,27,34,85,-7,-39,-95,-81,-78,85,-73,6,20,-31,71,99,-111,82,35,67,-79,9,-100,107,83,-42,36,-13,106,-8,-30,60,70,94,-116,-127,-19,-32,-16,100,11,-101,-73,-10,-74,-18,-41,-118,39,97,-103,94,101,33,33,97,-42,-55,-32,90,-94,41,26,-12,67,58,-1,12,-55,95,74,87,25,73,-121,-95,21,32,65,-52,27,-28,-80,90,-89,-91,-57,58, 
  /* [9][0][][] */ 15,21,126,58,88,-92,-43,-109,57,56,-3,60,-14,-63,-89,-9,22,3,-86,-58,18,113,-90,-90,127,0,1,42,1,-51,-78,106,68,11,37,-7,-66,25,-21,-39,50,-55,70,-84,90,37,-86,69,54,-3,-72,-40,81,-71,-61,112,92,-51,2,6,-81,110,86,-68,-70,15,114,57,-27,116,121,-84,20,92,-89,-86,-62,-109,-22,120,47,37,111,36,-27,-88,45,-1,114,49,-13,117,118,16,61,-25, 
  /* [10][0][][] */ -58,91,98,-57,-6,113,116,38,35,39,33,-58,108,73,-24,20,-25,89,-91,-52,-11,29,66,-59,25,62,-106,-103,-39,88,-83,-72,94,108,127,82,-31,15,-23,44,-26,123,-109,-28,-87,-58,-13,-53,7,7,47,17,71,31,-54,-26,-93,-6,38,-36,6,89,118,51,126,-66,-86,-13,31,-12,-89,-57,94,75,-73,117,-7,74,74,10,86,4,62,112,-97,77,108,-15,42,-4,-12,-58,-46,-59,-35,-64, 
  /* [11][0][][] */ 110,22,-18,110,127,52,64,38,94,99,-67,119,1,-97,35,-59,-47,-90,62,51,29,64,32,-101,-111,-87,-12,78,86,1,34,-11,-80,-64,59,53,-52,81,-20,-49,-16,110,-84,15,-37,-75,-107,-87,87,103,120,56,-84,-79,24,32,-64,-46,-29,-81,-70,97,92,19,37,95,-47,38,96,63,-92,-62,47,110,-91,60,-62,41,-52,72,-99,-23,-74,-38,41,-72,19,-25,-97,-23,-2,-93,-85,-49,-60,-41, 
  /* [12][0][][] */ 18,78,-47,10,98,16,-25,45,-78,69,-5,25,-36,6,59,-70,-90,-23,-42,-71,35,-9,27,108,-70,-40,111,-91,103,23,-26,126,-77,-61,-36,25,7,-66,-8,52,126,49,-108,-31,-13,-83,-47,125,-36,-111,-68,113,47,11,-74,95,-12,-50,62,77,68,124,4,65,122,42,-35,127,66,111,46,82,93,126,-7,5,-28,46,-109,-104,-48,110,55,25,-33,42,63,125,-85,-118,86,53,108,-31,39,78, 
  /* [13][0][][] */ 114,-50,109,105,103,122,90,74,70,-93,21,-18,99,65,76,-38,-107,-60,-63,39,76,-27,127,-37,-63,49,15,28,-77,-79,92,46,50,112,-11,46,-74,-19,35,78,-53,85,-49,22,-35,28,-11,-21,44,106,-25,-97,-88,39,109,-72,-40,37,-12,-65,-17,126,-67,24,-43,-53,-81,95,-28,-4,101,8,-82,48,-66,-31,-96,77,90,-71,61,-90,103,31,-78,-91,101,127,-2,-57,-79,63,118,-67,77,-2, 
  /* [14][0][][] */ -55,-87,97,80,89,-19,-4,-102,-81,-27,81,93,-19,-92,-79,-76,-41,-48,19,36,-37,30,10,72,-124,-62,-22,41,-104,-107,-67,49,115,-12,-23,14,107,127,46,-101,6,-101,35,100,77,-120,60,-76,127,45,88,61,108,-4,-6,23,-46,19,59,108,-6,-71,-18,83,-81,-2,89,-97,-79,-81,-86,105,13,93,60,-62,65,-96,65,23,56,-17,-112,-28,-115,-82,-102,117,118,-4,81,-43,89,88,-5,61, 
  /* [15][0][][] */ 15,-31,-31,68,87,-91,56,-103,71,-7,-76,5,101,16,-95,-116,84,5,-94,18,48,32,68,103,95,63,34,89,16,51,61,-105,0,3,-68,-9,-72,108,104,-72,11,107,-38,-29,21,-74,-28,-82,-12,-81,-9,26,-104,-106,-54,-12,64,47,-51,105,-50,-70,-3,98,-40,93,-77,-1,-64,2,68,-78,14,-17,53,-111,-6,49,102,96,-86,56,-103,-66,-121,-39,-95,34,84,86,-99,-45,56,127,-112,116, 
  /* [16][0][][] */ -79,-8,105,-75,37,115,-69,33,61,44,-127,69,-23,-41,-67,-74,109,77,73,61,114,88,-51,48,-25,51,-84,62,-120,6,35,5,-124,76,52,55,-47,50,-64,-84,15,-58,79,90,61,115,124,-20,-71,-124,-3,114,-54,117,64,41,23,89,67,6,118,110,30,59,51,7,-50,93,40,99,-36,-20,25,92,60,86,-19,98,-126,3,6,-95,58,3,11,102,104,2,78,32,-2,114,71,-15,-101,30, 
  /* [17][0][][] */ 21,-115,18,72,-46,-120,-69,-102,30,-91,80,48,92,48,-122,41,31,54,97,111,-105,-26,5,-56,14,63,-80,16,98,-61,-39,73,-35,-32,23,-1,-51,93,-96,-32,-98,-47,-29,-13,-2,0,72,-120,88,95,-17,22,-26,78,95,-86,-127,85,-95,-119,27,-95,72,94,-91,-83,39,-109,-119,-11,98,25,7,-125,-76,60,105,-46,31,-73,0,-27,-88,-100,-126,68,71,-41,9,66,-111,-125,-22,84,10,4, 
  /* [18][0][][] */ -101,96,103,-77,-15,-118,-111,-1,-10,70,-115,-54,-43,34,55,-65,16,-30,64,-30,97,-50,16,-87,37,-103,-24,107,23,28,-6,38,40,-34,-115,-115,-39,32,-41,58,-46,-6,-56,-16,-122,11,32,-8,13,-28,66,26,-117,-15,-3,82,-47,29,-23,-125,80,105,8,31,-76,-127,-38,84,63,-86,-77,104,-104,-35,-95,-111,49,52,-6,-80,-64,-14,-23,-74,99,-38,67,63,-114,-66,-53,101,82,-54,43,-23, 
  /* [19][0][][] */ 21,25,71,33,53,-87,91,85,99,-65,24,-16,-99,47,-60,56,68,-108,107,52,-24,92,-59,8,95,-83,24,-70,-96,-122,-70,41,76,-86,28,-5,4,-73,-61,-105,40,-119,-82,6,-88,33,91,-94,-31,33,-45,41,-40,10,1,-14,20,93,-6,-31,50,-60,97,57,-75,-6,-32,-6,-13,49,82,-55,-65,-121,-60,-84,-26,-112,12,125,53,-117,-31,72,-84,-8,4,-9,86,48,7,59,-36,127,64,-45, 
  /* [20][0][][] */ -9,68,69,94,-92,90,15,55,25,10,-92,-1,-11,102,37,-77,-55,-41,-65,-36,22,-41,-80,-76,94,-76,-109,45,20,9,-44,112,98,42,-18,54,39,-32,-19,-114,-89,-37,-79,-108,-31,-57,-54,109,60,-118,-108,38,45,109,51,-3,93,71,101,87,110,-59,-71,-38,-31,-71,-56,12,-89,-76,-65,76,-67,-86,27,16,109,76,111,127,84,6,104,-26,62,115,-17,74,25,115,40,63,23,45,-9,9, 
  /* [21][0][][] */ 95,83,77,-94,105,-69,82,26,-4,-57,-63,50,13,29,-42,-82,-94,-21,34,-4,113,-54,79,-74,53,-77,-24,81,23,12,1,-13,14,28,-83,-105,118,105,-107,-24,2,14,30,-6,-91,-83,-88,98,-15,-61,2,92,44,77,-86,32,-45,60,-43,127,62,-66,20,-4,89,39,-26,-61,-96,4,62,85,39,-11,79,76,-105,-20,69,90,21,99,40,-63,26,-87,71,-75,-97,68,102,-105,-39,-78,75,-28, 
  /* [22][0][][] */ 22,-46,-68,-90,92,-47,112,61,-93,80,-65,-96,115,-122,-104,-76,43,88,-108,-51,87,-86,37,36,79,-7,-104,103,-54,-68,-56,-99,52,64,21,16,10,-17,-52,-104,8,-6,-8,98,60,-127,73,-19,-53,-88,12,-11,-55,-81,-41,36,-13,-22,-20,-23,112,-66,-68,-103,-57,24,-102,-38,114,100,-33,4,-61,8,68,-81,49,-49,66,76,108,-97,-87,-109,72,85,94,-26,-62,17,-78,64,16,5,-21,89, 
  /* [23][0][][] */ 65,-85,8,68,111,-113,14,-97,45,-79,99,89,27,-126,29,-34,103,-25,-116,115,91,-87,119,-27,-33,-8,96,31,83,59,84,-31,-33,53,29,40,112,-2,-108,16,-101,7,-2,-106,-69,-107,107,33,92,-122,-84,-53,94,-53,-50,101,-100,-12,112,57,-108,-87,-51,-2,44,47,-113,-108,75,-9,111,-66,0,-36,-31,-91,54,-16,106,105,-48,-59,20,-109,99,7,127,-19,-100,25,94,1,106,-75,-25,74, 
  /* [24][0][][] */ -72,-39,-95,-59,-74,-100,-57,-80,60,127,93,56,124,54,-28,-106,-69,54,28,-41,102,-76,-44,-27,37,-19,84,67,117,65,15,-52,8,19,60,39,-42,-79,72,-10,-61,-90,99,15,31,-45,37,76,-76,-43,-11,24,81,70,80,-63,1,88,33,11,101,5,45,106,-87,106,-35,-79,-91,63,-55,-15,-29,42,104,111,71,-65,-95,-90,-68,-87,-63,-104,5,71,-3,-90,32,-123,-8,-68,-9,19,-82,24, 
  /* [25][0][][] */ -82,-48,-71,-1,101,-65,-93,63,36,-103,-29,31,80,-13,-100,-14,-64,69,26,-99,74,84,-3,-49,-3,-44,-94,46,85,-80,48,123,101,-101,52,80,106,-54,-13,-9,-74,104,-104,12,106,36,51,40,-96,93,-61,10,53,-11,-54,19,-17,60,-99,83,127,52,58,54,9,83,-8,1,-81,3,-36,-104,42,-109,80,31,78,83,22,9,58,54,-46,91,-73,-42,-95,-82,-17,-55,89,31,-110,-29,-10,-99, 
  /* [26][0][][] */ 50,-119,-25,-19,-101,-9,-16,-19,-100,-123,99,79,-82,-38,5,-19,106,25,-81,-71,11,71,92,8,60,58,7,42,8,1,-96,-6,-34,-64,-102,-105,-69,79,-56,102,-102,96,54,27,-74,72,-34,97,-26,25,-10,94,6,-51,-8,-108,91,58,49,20,-3,-98,60,-26,107,-23,-61,51,-90,72,85,90,75,-99,-90,3,42,-109,-98,27,-33,71,78,-78,76,-3,-48,9,-84,124,17,13,-56,127,45,87, 
  /* [27][0][][] */ 26,18,-43,-84,-106,-55,-61,-8,60,108,47,-90,-12,73,95,-10,81,-11,77,-70,-75,29,-10,-5,-84,56,-89,14,78,40,-21,1,71,80,-75,-71,-73,-49,-93,94,-87,29,46,28,110,43,86,120,91,79,69,-55,-77,-78,4,-18,112,-14,-94,-63,-38,-50,-25,62,54,-33,-96,116,64,29,-98,16,75,-33,7,-76,65,-51,104,119,102,-11,127,-46,-54,-72,-20,47,-30,15,-16,-35,68,36,90,72, 
  /* [28][0][][] */ 90,1,86,47,-110,-60,-93,-71,-52,-113,64,75,-77,-89,5,105,98,116,-88,78,-42,19,-103,-72,-127,82,-80,-56,-70,-72,3,-15,-111,20,83,67,22,-111,-37,36,108,46,-110,56,-109,-8,11,51,28,-68,-75,-30,-82,28,52,42,42,-8,84,56,-3,-39,-92,9,62,77,-19,85,-75,28,-109,-38,73,22,-1,-97,-112,-76,-83,30,-72,-101,92,-44,65,-118,69,-96,-109,-82,-40,-63,-56,38,-96,-86, 
  /* [29][0][][] */ 50,49,52,-60,-96,8,-127,0,106,-20,-98,-103,104,-97,-56,-53,-108,99,26,-73,-82,-34,50,-1,-29,3,-51,-34,-111,-13,100,-9,47,-4,-88,-63,-17,101,-16,91,44,105,-45,79,-6,110,-46,-29,13,-10,54,-101,68,-108,109,42,-100,52,-56,105,-125,93,-101,-58,-68,-71,47,86,92,-93,36,-79,109,74,57,20,113,-68,-35,48,-11,-90,-10,-85,64,115,40,76,-42,111,81,77,-109,36,-8,61, 
  /* [30][0][][] */ 42,-54,-43,51,-81,38,-47,-4,125,-1,13,-27,-82,32,73,24,11,48,103,-82,54,-81,-94,28,-97,38,-51,127,2,-96,-75,21,-66,-52,-99,-36,25,-1,7,34,99,-59,5,110,117,-27,114,73,-58,87,29,-89,104,-38,6,115,-64,-39,-67,-39,-87,12,-57,-14,-89,-69,-76,103,-43,123,60,-21,-72,117,53,-67,-42,-55,-60,-41,44,41,-88,-11,-87,43,-92,116,-24,-98,91,66,-18,13,16,-51, 
  /* [31][0][][] */ 79,-98,32,96,46,59,-65,-106,-29,-24,-85,-94,96,-114,-53,108,-66,-95,55,44,61,39,-36,102,64,-118,32,36,-79,-79,43,105,14,17,-98,-13,93,-30,-73,-117,57,-73,-31,28,0,-54,-32,23,68,31,90,-33,-122,-63,-87,19,-121,64,2,111,-44,-8,85,-81,66,108,-51,-83,69,-127,-119,6,-102,-27,-1,2,-64,-51,48,105,-82,-47,69,69,56,96,-99,14,20,-34,-76,-60,9,125,-10,-16, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019005590584129095, 0.0018463380401954055, 0.0017976262606680393, 0.001737263984978199, 0.0016909654950723052, 0.0016775316325947642, 0.0018004410667344928, 0.0017805059906095266, 0.0018366482108831406, 0.001866630045697093, 0.0018468977650627494, 0.0018330205930396914, 0.0018136728322133422, 0.0018405411392450333, 0.0018288874998688698, 0.0018301469972357154, 0.001668198499828577, 0.0018188913818448782, 0.0017900208476930857, 0.0018254611641168594, 0.0017789716366678476, 0.001836092327721417, 0.0019081979990005493, 0.0017331326380372047, 0.0018479209393262863, 0.001842050114646554, 0.0018602521158754826, 0.0018518285360187292, 0.0018205658998340368, 0.0017654257826507092, 0.0018933326937258244, 0.0018111005192622542, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1509, -112, 4099, 5986, 5414, -2510, 4228, -1412, -2188, -832, 5351, -3023, 4562, 7529, 2294, 2135, -812, -727, -2074, 5796, 1831, -608, 2772, -669, -1259, 3576, 1404, 2238, 4178, 2641, 5013, 1510, 1199, 5573, 5293, 3968, -544, 3506, 2927, -5936, -501, 1229, -70, 1623, -1325, 423, -1558, 760, -10468, 1953, 1403, -3218, 8293, -933, 1985, 1472, 1124, 3577, -714, -2366, 391, 2133, 389, 4543, 6922, 3383, 3376, 5043, 4382, -698, 2956, 7264, 3151, -1540, 5173, 7498, 965, -3737, 547, 1427, 12262, 2359, -329, -2718, 1347, 752, 1269, -2270, 4594, -500, 4294, 1461, 134, -3092, -141, 1570, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012913494720123708, 0.00023991995840333402, 0.00013587727153208107, 0.00012937243445776403, 0.00011838257341878489, 0.00016449375834781677, 0.00014310842379927635, 0.0001597669324837625, 0.00019124749815091491, 0.00018494522373657674, 0.00011933216592296958, 0.000142062664963305, 0.00012534168490674347, 8.1684484030120075e-05, 0.00014053448103368282, 0.00018279303913004696, 0.00020371282880660146, 0.0001465132663724944, 0.00014467198343481869, 0.00010908233525697142, 0.00023299417807720602, 0.00017252190446015447, 0.00013466310338117182, 0.00016391689132433385, 0.00017917065997608006, 0.00016594683984294534, 0.00021313104662112892, 0.0001491204893682152, 0.00017470968305133283, 0.00016557378694415092, 0.00010723987361416221, 0.00015656946925446391, 0.00023576428066007793, 0.00011435421038186178, 0.00011863823601743206, 0.00012696284102275968, 0.00018447445472702384, 0.00012781105760950595, 0.00014037119399290532, 8.958310354501009e-05, 0.00015904128667898476, 0.00016510658315382898, 0.00016948282427620143, 0.00015745258133392781, 0.00018207942775916308, 0.0001691910729277879, 0.00016575217887293547, 0.00017261694301851094, 6.8390632804948837e-05, 0.00013848277740180492, 0.00018728790746536106, 0.00014742834900971502, 9.1705216618720442e-05, 0.0001631675404496491, 0.00016480877820868045, 0.0001757503196131438, 0.00015364857972599566, 0.00010915611346717924, 0.0002013539633480832, 0.00013006603694520891, 0.00017434680194128305, 0.00012984394561499357, 0.00019469759718049318, 0.00014772804570384324, 0.00010016650048783049, 0.0001428672403562814, 0.00011760809138650075, 0.00014442756946664304, 0.00014901059330441058, 0.00018559528689365834, 0.00016403282643295825, 9.3494134489446878e-05, 0.00014468136942014098, 0.000148027203977108, 0.00013565324479714036, 0.00010857462621061131, 0.00010763936006696895, 0.0001675695093581453, 0.00017411814769729972, 0.00013235285587143153, 7.1016816946212202e-05, 0.00012672814773395658, 0.00019142038945574313, 0.00015235136379487813, 0.00014819670468568802, 0.0001359175075776875, 0.00020168776973150671, 0.0001760459563229233, 0.0001420377375325188, 0.00015386125596705824, 0.00013779218716081232, 0.00014443276450037956, 0.00014504307182505727, 0.00013366721395868808, 0.00018982862820848823, 0.00015625373634975404, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -10,96,-85,31,47,-33,101,64,-63,-1,35,-90,82,127,-60,22, 
  /* [1][0][][] */ -16,4,-55,-21,-6,47,20,-127,33,-43,-25,-56,-13,-37,-55,1, 
  /* [2][0][][] */ -20,-23,34,77,26,46,-107,127,-19,6,71,-60,-20,-61,-44,64, 
  /* [3][0][][] */ 92,-101,76,-12,-9,-39,-29,127,-36,55,77,58,-2,56,18,14, 
  /* [4][0][][] */ -43,-25,-12,40,-91,8,-24,-127,-6,-15,37,-9,29,44,104,112, 
  /* [5][0][][] */ 127,27,-22,-20,-76,25,24,74,18,-8,58,88,123,31,-87,1, 
  /* [6][0][][] */ 12,-41,-65,-62,-81,1,4,-57,-58,-60,-24,33,84,48,127,-4, 
  /* [7][0][][] */ -54,28,-33,-81,-1,-64,-73,10,-102,51,-67,-62,-127,-41,18,93, 
  /* [8][0][][] */ 50,40,71,10,56,25,70,11,67,-28,39,3,-127,-25,-79,13, 
  /* [9][0][][] */ -33,63,30,-40,-24,-10,26,-11,-27,51,-42,10,41,127,22,24, 
  /* [10][0][][] */ 75,52,-44,58,-36,-14,60,-48,-86,-42,-57,-106,-127,-85,7,107, 
  /* [11][0][][] */ 46,2,60,6,-16,-33,13,103,-93,20,-27,6,-12,-7,63,127, 
  /* [12][0][][] */ -47,-25,3,-6,16,-4,127,36,-67,19,11,-8,-4,76,-36,109, 
  /* [13][0][][] */ 23,54,35,53,124,41,127,111,-52,121,-97,-69,47,104,-117,-30, 
  /* [14][0][][] */ -115,119,0,-21,-10,-1,72,-5,-49,27,127,-2,-90,19,-38,55, 
  /* [15][0][][] */ -12,-15,-127,-42,85,-41,-93,-32,-20,-17,-19,-70,-8,-80,-62,47, 
  /* [16][0][][] */ 116,-13,12,-7,34,-27,41,-17,-34,15,127,49,52,8,-44,16, 
  /* [17][0][][] */ 17,20,-22,-99,-6,-56,112,-127,5,-17,-50,28,39,77,8,45, 
  /* [18][0][][] */ 23,118,-13,-42,60,-68,-24,-48,-37,127,-23,-5,-28,57,-19,-30, 
  /* [19][0][][] */ -63,-122,115,-99,38,-127,35,-45,42,36,93,107,30,-17,77,-27, 
  /* [20][0][][] */ -16,91,58,2,10,1,21,-29,61,-8,96,-26,-127,-27,-70,-8, 
  /* [21][0][][] */ -69,39,24,21,69,39,68,53,-127,56,-45,14,-29,23,-66,-28, 
  /* [22][0][][] */ 16,-90,40,6,14,-127,115,0,13,-57,-37,-68,44,-87,-46,-47, 
  /* [23][0][][] */ -60,-95,43,64,28,-16,24,-42,20,-39,82,5,6,70,73,127, 
  /* [24][0][][] */ -5,-6,23,84,47,19,-56,-127,64,17,-40,18,1,3,-27,-24, 
  /* [25][0][][] */ -11,34,22,-43,-22,0,7,-28,-23,56,-44,-13,35,127,17,5, 
  /* [26][0][][] */ -64,75,3,15,28,-91,1,-37,13,19,16,76,11,-3,-77,127, 
  /* [27][0][][] */ -22,-127,-46,9,-59,95,-2,-58,20,-35,55,-32,30,-44,-107,-22, 
  /* [28][0][][] */ -35,-1,35,74,23,7,-35,-127,-118,44,103,-9,73,7,-38,-22, 
  /* [29][0][][] */ -127,110,-27,-39,-33,21,-125,-83,-50,-41,1,2,11,-68,-110,67, 
  /* [30][0][][] */ 54,76,-57,77,-119,-105,-74,-24,-47,-11,10,-117,127,30,-5,102, 
  /* [31][0][][] */ 127,29,-67,-32,-64,19,96,37,-57,-15,64,46,42,23,-22,6, 
  /* [32][0][][] */ -31,-17,127,4,-19,75,69,20,-15,-9,-11,18,5,70,57,38, 
  /* [33][0][][] */ 4,27,-68,-56,-25,25,124,20,-7,-12,26,-71,99,127,-46,52, 
  /* [34][0][][] */ -106,-24,100,23,32,-51,110,-3,-127,42,37,-45,56,64,-62,-37, 
  /* [35][0][][] */ -8,16,-61,9,-88,127,-32,-26,-26,127,8,104,-68,71,29,42, 
  /* [36][0][][] */ -7,-73,127,-46,-49,19,-44,-5,18,24,-52,76,0,-81,-41,43, 
  /* [37][0][][] */ 82,-6,76,-27,118,-71,-52,37,-57,127,-69,-3,-93,-40,106,-24, 
  /* [38][0][][] */ 45,40,10,-109,-15,-60,-97,51,-92,51,-95,-48,-66,-127,-98,68, 
  /* [39][0][][] */ -80,24,-61,-29,-76,-76,69,16,-127,-32,20,78,35,1,-2,49, 
  /* [40][0][][] */ 127,40,11,-83,-64,28,9,-31,-31,-17,-49,-83,11,56,38,29, 
  /* [41][0][][] */ 98,-76,-57,-45,-1,0,-64,-17,64,-20,-1,-61,127,-69,55,-36, 
  /* [42][0][][] */ -13,-80,-38,127,8,-89,-109,21,10,11,5,49,-72,76,-60,-5, 
  /* [43][0][][] */ -94,-46,-44,-117,-53,5,-5,79,45,-127,-39,35,-22,-47,-35,92, 
  /* [44][0][][] */ -43,44,42,-39,-21,-18,28,127,121,-79,79,102,119,54,-29,0, 
  /* [45][0][][] */ 24,77,-74,98,127,-82,-40,-59,109,-64,67,-67,-27,15,-76,59, 
  /* [46][0][][] */ -20,-40,8,-13,96,-28,35,16,-13,127,-27,-120,38,61,-48,77, 
  /* [47][0][][] */ 74,-40,-29,-8,79,-12,-42,-53,0,127,-29,32,-7,-98,-81,10, 
  /* [48][0][][] */ 14,29,-10,-127,-2,-47,113,-122,10,5,-41,46,52,66,7,36, 
  /* [49][0][][] */ -18,127,-71,30,42,-61,76,50,-34,17,43,-87,-30,71,127,-90, 
  /* [50][0][][] */ 14,42,-19,-1,-127,-1,-67,-60,53,68,29,28,-39,-38,4,33, 
  /* [51][0][][] */ 127,-43,-52,-17,-49,84,-91,-47,43,-21,-38,69,-30,-70,5,43, 
  /* [52][0][][] */ -28,-59,39,62,-58,-117,-127,-21,-59,-68,-28,-66,10,-75,17,95, 
  /* [53][0][][] */ 22,94,51,-127,2,103,94,-24,-16,-30,-3,-35,84,-116,6,60, 
  /* [54][0][][] */ 33,127,11,-15,0,-87,-110,57,9,-19,-46,123,79,95,14,58, 
  /* [55][0][][] */ -39,-20,48,21,43,-39,112,82,-88,-13,24,16,127,43,-1,4, 
  /* [56][0][][] */ 127,25,16,29,-45,118,-58,-72,-21,53,-86,4,-59,110,-13,36, 
  /* [57][0][][] */ -49,-35,-45,-31,-68,-94,61,-21,-127,-27,57,53,18,38,-6,51, 
  /* [58][0][][] */ 46,-55,60,18,3,-66,-15,3,24,-15,-127,-25,26,-37,-32,47, 
  /* [59][0][][] */ 80,16,-127,96,10,37,86,-30,-75,-48,29,-108,-123,-60,34,112, 
  /* [60][0][][] */ -5,27,-15,18,-20,-28,-20,1,-38,-82,65,122,-44,-127,-35,-2, 
  /* [61][0][][] */ -30,9,78,-103,-81,48,9,116,-23,-109,53,75,87,-11,23,127, 
  /* [62][0][][] */ 73,43,-10,-127,-16,6,9,-39,-4,31,-34,47,25,-21,-86,-71, 
  /* [63][0][][] */ -3,-31,-1,-10,-70,-73,-54,6,-76,-17,-31,-17,127,-2,52,-10, 
  /* [64][0][][] */ 25,-3,-22,54,-122,-54,-18,-99,59,127,45,5,36,-66,-37,125, 
  /* [65][0][][] */ -33,5,-23,-21,-88,77,30,-33,52,-127,107,-66,75,65,-125,68, 
  /* [66][0][][] */ -123,102,-96,-82,44,-30,-117,-62,-98,119,92,-1,-127,-53,37,54, 
  /* [67][0][][] */ 5,-31,-127,-112,64,73,9,-30,-28,-6,50,-19,25,39,21,48, 
  /* [68][0][][] */ 60,27,-11,-48,-65,40,14,36,-63,75,127,-17,-15,-42,-119,-6, 
  /* [69][0][][] */ 77,-114,54,-52,16,-121,-27,127,-5,64,91,89,-18,71,-22,1, 
  /* [70][0][][] */ 52,12,119,31,91,-27,127,4,27,16,-64,45,-68,53,-67,39, 
  /* [71][0][][] */ 11,34,100,-72,-127,-79,12,12,-21,-8,19,-107,-80,6,13,29, 
  /* [72][0][][] */ -63,-94,27,-117,78,-10,6,48,-63,17,-127,-21,54,121,-63,115, 
  /* [73][0][][] */ 26,15,48,-9,122,-97,-45,2,-39,93,-87,35,-84,-59,127,-14, 
  /* [74][0][][] */ -111,6,-122,-65,70,-39,-44,31,-80,8,-127,-41,-40,-55,-47,78, 
  /* [75][0][][] */ 92,-29,48,-51,17,1,-127,-32,-10,-105,74,7,-1,-18,-2,-6, 
  /* [76][0][][] */ 5,-54,-35,123,46,101,103,-59,93,-127,68,117,38,-88,-80,39, 
  /* [77][0][][] */ -36,-34,127,-19,36,-26,-30,-110,19,22,33,85,44,51,15,0, 
  /* [78][0][][] */ -45,6,16,-35,1,-55,31,-8,26,-13,15,-96,-104,-68,-127,-53, 
  /* [79][0][][] */ -94,-69,-14,27,127,35,-21,21,24,31,-20,46,-49,-66,-61,-20, 
  /* [80][0][][] */ -3,-127,44,122,-42,-35,-103,78,-15,19,83,8,-80,-14,-25,81, 
  /* [81][0][][] */ 125,63,-24,83,-8,33,30,127,16,7,125,66,125,26,72,-17, 
  /* [82][0][][] */ -49,0,13,-34,27,-127,-111,-86,1,73,-43,-31,-28,93,-65,-22, 
  /* [83][0][][] */ 110,-24,81,-35,-43,-15,-127,-11,22,-127,15,-52,-18,-13,16,-21, 
  /* [84][0][][] */ 16,-65,-90,32,127,42,34,36,-107,24,-107,-27,44,-29,-73,10, 
  /* [85][0][][] */ 12,88,44,-42,99,6,40,-107,127,-32,34,-17,89,-77,2,-2, 
  /* [86][0][][] */ 120,-33,127,52,5,-52,73,43,-59,-51,-99,-49,34,22,-67,7, 
  /* [87][0][][] */ -2,10,20,-75,73,-28,-46,15,37,-36,71,-38,-86,-127,0,21, 
  /* [88][0][][] */ -61,-35,39,-6,20,27,-61,-50,-6,9,-70,-127,-49,-43,-18,-14, 
  /* [89][0][][] */ -75,9,20,-63,22,6,-127,24,80,25,-64,-9,-12,-77,-45,-16, 
  /* [90][0][][] */ -5,-11,-27,-81,127,16,-53,33,44,52,23,-9,33,13,-60,-20, 
  /* [91][0][][] */ -42,-60,23,57,-39,-5,-14,81,-35,-52,23,-53,-2,69,14,127, 
  /* [92][0][][] */ -25,79,-1,-17,-25,59,-95,47,-45,-14,72,6,-33,127,57,29, 
  /* [93][0][][] */ -12,77,-57,-68,73,95,-79,12,65,70,82,56,-127,33,-44,84, 
  /* [94][0][][] */ 22,60,92,7,-127,-41,15,-15,16,-23,30,-15,-51,-26,14,-20, 
  /* [95][0][][] */ -8,20,37,8,127,-13,-99,78,17,19,-77,88,-7,14,93,-41, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015245141694322228, 0.0028323964215815067, 0.0016041112830862403, 0.0015273177996277809, 0.0013975759502500296, 0.0019419457530602813, 0.0016894792206585407, 0.0018861426506191492, 0.0022577892523258924, 0.0021833872888237238, 0.0014087865129113197, 0.0016771334921941161, 0.0014797323383390903, 0.00096433341968804598, 0.0016590922605246305, 0.0021579794120043516, 0.0024049498606473207, 0.0017296753358095884, 0.0017079379176720977, 0.0012877811677753925, 0.002750633517280221, 0.0020367226097732782, 0.0015897771809250116, 0.0019351354567334056, 0.0021152151748538017, 0.0019591001328080893, 0.0025161374360322952, 0.0017604551976546645, 0.0020625507459044456, 0.0019546961411833763, 0.0012660298962146044, 0.0018483948661014438, 0.0027833362109959126, 0.0013500187778845429, 0.0014005942502990365, 0.0014988711336627603, 0.0021778296213597059, 0.0015088848304003477, 0.0016571646556258202, 0.001057581277564168, 0.0018775761127471924, 0.001949180499650538, 0.0020008445717394352, 0.0018588204402476549, 0.0021495549008250237, 0.0019974003080278635, 0.0019568020943552256, 0.0020378446206450462, 0.00080739165423437953, 0.0016348706558346748, 0.0022110440768301487, 0.0017404785612598062, 0.001082634087651968, 0.001926288940012455, 0.0019456647569313645, 0.0020748360548168421, 0.0018139119492843747, 0.0012886521872133017, 0.0023771021515130997, 0.0015355062205344439, 0.0020582666620612144, 0.0015328843146562576, 0.0022985197138041258, 0.0017440165393054485, 0.0011825244873762131, 0.0016866319347172976, 0.0013884328072890639, 0.0017050525639206171, 0.0017591578653082252, 0.002191061619669199, 0.001936504035256803, 0.0011037533404305577, 0.0017080487450584769, 0.0017475483473390341, 0.0016014664433896542, 0.001281787408515811, 0.0012707459973171353, 0.0019782567396759987, 0.0020555672235786915, 0.0015625033993273973, 0.00083839538274332881, 0.0014961004490032792, 0.0022598304785788059, 0.0017985975136980414, 0.0017495492938905954, 0.0016045862575992942, 0.0023810428101569414, 0.0020783261861652136, 0.0016768391942605376, 0.001816422794945538, 0.0016267178580164909, 0.0017051137983798981, 0.0017123188590630889, 0.0015780201647430658, 0.0022410387173295021, 0.0018446673639118671, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 12733, 15495, -5381, 3187, 373, 10792, -631, 4912, 20134, -5311, -12497, 10544, -17092, 11684, 5531, 7997, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.8231569962808862e-05, 5.8139143220614642e-05, 5.4826992709422484e-05, 5.752470315201208e-05, 5.8138884924119338e-05, 5.6244636652991176e-05, 4.8647601943230256e-05, 4.629772956832312e-05, 8.3092818385921419e-05, 6.1739534430671483e-05, 5.0658640248002484e-05, 4.7102108510443941e-05, 6.0881371609866619e-05, 5.0633785576792434e-05, 6.4366162405349314e-05, 5.2649433200713247e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -108,44,66,-31,-80,-13,-68,-5,-53,12,-8,-33,36,47,36,-35,13,-4,102,18,5,-55,127,74,53,33,9,28,-65,-119,-98,6,-44,-54,25,25,13,19,0,35,-4,-6,-81,10,-77,-23,-1,89,-18,17,-46,-22,-8,-1,23,-61,-106,8,-17,80,62,33,1,2,-36,-55,-52,22,-65,-73,7,-23,3,-3,-78,-51,-53,7,-44,1,-58,69,84,-81,15,50,14,47,29,-19,-5,-26,-34,-36,-56,16, 
  /* [1][0][][] */ 32,16,22,-47,-59,-21,-10,15,-20,26,55,-53,6,-13,-61,-38,-10,2,-68,24,-10,-74,13,44,-8,-67,-4,-44,64,-109,110,-80,55,20,-19,53,31,72,-8,-45,30,19,-1,-17,11,60,-127,-46,-50,-48,-19,-22,39,-44,-32,48,12,-4,-33,20,22,49,-12,-95,-12,-11,-56,-2,6,-13,-82,-8,-39,-20,15,-75,11,23,29,-67,-25,-25,-84,-32,37,-36,-25,21,-78,-8,-52,46,24,63,-55,49, 
  /* [2][0][][] */ 78,-35,23,28,25,-72,66,3,-14,-12,-16,-7,-75,-34,14,-40,-95,-47,-43,44,11,-49,-42,24,-5,-74,5,-23,-35,41,-53,123,-58,127,-24,19,-17,-11,-20,-15,-106,78,69,13,-59,3,-19,-8,37,3,-35,-48,47,-17,-19,72,42,-5,52,-6,5,39,-36,15,76,15,0,-4,35,58,-43,-1,53,52,68,37,36,-67,69,56,83,-9,-37,31,-61,29,18,76,12,15,-23,32,-47,45,-22,31, 
  /* [3][0][][] */ -2,-6,-19,9,15,-6,9,-61,-26,54,32,59,24,-14,-48,40,5,-30,29,8,17,127,35,-48,6,18,-21,8,63,-39,63,-18,-24,35,-25,-29,22,50,30,10,-76,-30,-40,23,-33,28,23,-1,-20,-50,-5,-21,49,-77,-29,-47,11,83,-24,0,-11,-12,-44,7,27,44,-37,3,-20,2,14,-65,-29,-46,34,-12,16,-2,-31,-26,-30,-7,-49,14,-15,-40,31,-21,2,20,24,-17,46,24,-33,60, 
  /* [4][0][][] */ 36,15,-41,10,22,19,-44,4,-25,81,100,-18,-10,4,2,-46,8,-17,-25,55,14,-53,52,95,-71,4,-127,15,-41,-60,5,20,-59,-47,14,61,19,33,22,34,-32,-41,48,-23,-9,12,-31,49,-39,60,17,15,41,-18,-89,15,50,-13,6,-7,53,-2,27,5,-48,14,-42,2,-55,25,-51,50,38,-68,-34,-52,23,-65,-11,4,-40,86,-86,-3,-24,27,32,-66,54,0,26,9,-56,-25,40,34, 
  /* [5][0][][] */ -86,36,49,-6,45,-25,60,-46,-14,31,-3,-33,37,-18,-23,-47,-5,-39,54,23,-127,-24,-79,46,-48,-5,45,9,50,-76,-15,49,61,121,-18,36,-9,15,43,-17,-33,98,75,-31,-6,68,51,-10,-4,19,-29,27,18,-43,27,-102,39,-56,-63,-70,68,104,-49,-25,77,-45,-86,-72,-63,-28,-66,-11,-26,8,-28,-43,18,-48,-35,-19,127,-28,20,-91,-91,41,38,-19,-48,40,27,-10,-17,35,15,100, 
  /* [6][0][][] */ 49,-9,-93,29,-40,-119,112,100,-61,79,-12,82,-127,-82,58,63,-5,-64,-4,7,-7,-17,-69,-63,-56,50,86,28,34,38,96,-53,30,13,14,-75,16,6,38,71,9,15,-60,-25,-2,-61,-79,21,41,-122,-25,75,34,7,-24,-74,81,51,9,-7,-115,55,-100,0,26,12,-3,56,41,26,-3,-57,-37,21,107,39,65,-26,42,-81,-5,-58,-81,67,10,-65,50,14,-48,70,44,41,-23,18,-36,122, 
  /* [7][0][][] */ 35,87,-39,-57,-29,-8,33,7,-59,35,-52,-54,-34,14,15,-7,-47,-48,-30,63,-8,127,13,34,-3,8,25,31,54,47,81,-27,64,34,-24,13,6,-11,-3,37,-68,-5,7,-59,13,-51,78,-23,39,-71,-80,-24,-51,6,-5,-10,32,13,-99,7,-7,109,15,-20,-26,4,-47,13,-43,-17,-106,30,10,65,-35,40,-57,53,8,-75,-19,-49,60,-80,38,-18,-11,-2,-12,70,-88,45,52,-31,-43,12, 
  /* [8][0][][] */ -7,81,-44,37,-41,-34,-83,21,-95,-30,10,-2,-42,42,28,89,8,-51,9,11,28,-6,1,-9,-35,80,0,21,-14,-16,-45,-30,-18,-59,-33,-66,-41,20,49,9,-1,-38,33,14,-42,-31,11,-18,-22,-14,47,66,2,-25,-77,96,-34,34,-7,-43,-34,13,23,48,-34,-60,-43,-15,-46,1,-1,-2,-24,-49,-118,-15,-52,20,-68,-45,-30,-2,-48,-39,-4,-1,25,25,12,62,-55,-7,-90,-127,27,-47, 
  /* [9][0][][] */ -17,20,-72,47,-30,-30,67,57,-13,46,-27,100,-26,-25,27,127,9,15,70,14,22,15,38,-96,-36,-7,23,-6,9,-20,44,50,-32,3,3,-115,24,-15,-27,-22,-18,23,39,-28,-9,0,14,22,38,84,29,-6,-59,-76,1,4,4,-12,73,-15,-68,53,-64,-24,88,-9,-22,10,-66,31,39,33,-5,90,-19,-28,-27,23,-43,-7,54,-27,67,0,31,-12,-16,-31,-54,19,-2,1,62,34,-49,-3, 
  /* [10][0][][] */ 68,-1,-43,2,-29,-27,70,3,6,-29,-26,-2,-91,-22,7,-10,-68,-28,20,18,45,41,27,1,-51,80,37,-2,-55,-80,-25,-13,72,-31,53,8,70,-83,81,123,12,-59,0,2,-16,-96,-11,69,29,82,-73,-40,-23,32,21,62,17,-67,83,56,-16,44,-69,-15,-2,-55,26,62,27,-19,-7,45,127,41,29,-86,35,-43,62,-4,-52,36,40,29,-42,-9,2,48,-41,-9,28,51,47,64,-37,6, 
  /* [11][0][][] */ -55,-37,41,-70,10,-18,-32,-46,47,-43,0,-2,-16,0,2,8,-66,1,65,15,-59,17,-82,-84,17,21,-44,45,37,-54,43,-39,25,-2,20,-22,-75,4,-124,21,-76,71,-54,61,15,8,1,-44,24,-41,-62,-56,23,26,81,-62,-27,-67,16,-51,-21,-50,-26,-127,9,-69,59,73,115,15,76,-17,-45,-19,64,-37,93,33,26,44,32,-14,-30,87,84,8,-5,-25,-79,-71,-18,29,64,43,62,79, 
  /* [12][0][][] */ 34,-22,-1,-32,40,109,-5,30,42,58,-3,58,18,44,17,-2,-57,50,14,46,127,3,64,-74,28,19,-71,-63,-23,75,5,7,29,-11,12,-37,40,2,-31,-36,17,-21,39,54,-19,33,-3,-6,-60,22,-4,20,-21,-25,16,20,-37,55,11,48,23,-92,10,-94,-4,87,-9,-30,1,-36,64,15,-7,18,-5,45,-7,53,-71,-8,-25,28,124,20,-12,70,-27,-62,70,14,-74,52,70,8,-19,-91, 
  /* [13][0][][] */ -10,36,-15,-45,-35,-10,10,-35,17,-28,-29,-66,58,-103,-41,-74,-21,-34,-85,-11,-92,-35,14,98,-26,9,112,9,19,-35,55,45,17,-4,-118,127,-33,-52,32,-59,116,10,3,30,-2,-85,54,-27,80,-6,-45,24,30,-7,-2,74,70,-55,-47,-5,48,40,-3,-86,0,30,-37,31,-71,-34,-76,-3,-61,24,-37,-86,-102,23,30,76,-17,62,34,-92,58,45,30,-15,-21,-10,-10,23,-54,21,-27,-8, 
  /* [14][0][][] */ -9,19,-77,-25,82,87,-89,-9,26,-46,77,-7,19,-24,-36,-70,-67,19,30,127,10,-24,-7,8,-1,36,-32,66,10,-8,-23,5,63,-6,-39,2,-20,60,73,8,60,1,32,4,-7,-38,52,-39,23,-11,-17,-23,46,15,-37,28,8,56,-90,-10,-18,-66,-42,-98,8,-45,-48,-5,-73,53,-15,31,2,-28,-27,-32,37,-13,-50,-31,29,6,-3,-13,-11,43,-12,-18,-34,67,64,16,4,-43,-47,-67, 
  /* [15][0][][] */ -79,-44,35,-58,28,-25,-33,-83,-11,17,-9,70,-8,-29,38,90,-110,-16,15,-76,38,-25,-13,-93,49,-15,49,-50,-69,-114,-63,34,-42,58,91,-104,-13,-29,29,-32,-27,-4,29,-17,8,-5,64,112,-47,-13,20,-44,-44,63,24,-48,-101,-20,109,19,-36,9,-94,36,-63,-13,16,35,63,-66,97,-18,71,-33,-32,-44,21,36,57,11,-22,78,66,40,-4,-20,-127,17,-11,-50,-82,35,44,-36,-29,62, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0023165484890341759, 0.0027924063615500927, 0.0026333248242735863, 0.0027628950774669647, 0.002792394021525979, 0.0027014138177037239, 0.0023365304805338383, 0.0022236667573451996, 0.0039909244515001774, 0.0029653322417289019, 0.0024331200402230024, 0.0022623008117079735, 0.0029241149313747883, 0.002431926317512989, 0.0030914884991943836, 0.002528737299144268, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -130, -394, -2985, -5388, -388, 2205, -347, -1108, -229, -2024, 10679, -2148, -1076, 9762, 7526, -5458, 12888, 1933, -4823, 565, -926, -2252, 490, -1865, 618, -3706, -357, -5138, 173, -8127, 323, 52, 11490, 528, -781, -31, -39, -1749, -927, 7613, -427, 373, 1523, -5611, 13549, 12756, -719, 15928, -728, 14319, 15692, -4845, -1048, -261, -143, 11713, -1310, -441, 15075, 7124, 9173, 11478, 7828, -8697, 318, 1047, -2717, 3105, -3438, -2089, 1589, 1678, 12068, -78, -1146, 10101, 192, 101, 8420, -458, -139, 18421, -322, 2018, 20931, 778, -3840, -2853, -1002, -5529, 11870, 405, -1160, -767, -4678, -3629, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.0002178149443352595, 0.00015888006601016968, 0.00014864899276290089, 0.00016802812751848251, 0.00027673144359141588, 0.00029011274455115199, 0.00027175957802683115, 0.00020075168868061155, 0.00027378089725971222, 0.00012720235099550337, 0.00011611908848863095, 0.00030910511850379407, 0.00027217951719649136, 0.00013330124784260988, 0.00014048069715499878, 0.00013455691805575043, 0.00012102694745408371, 0.00025532871950417757, 0.00017832823505159467, 0.00012467024498619139, 0.00016315281391143799, 0.00028768100310117006, 0.00020634317479562014, 0.00021678497432731092, 0.00062248436734080315, 0.00021309258590918034, 0.00025025501963682473, 0.0001337082649115473, 0.00022064871154725552, 9.5959549071267247e-05, 0.00028942071367055178, 0.0002051362389465794, 0.00016838192823342979, 0.00015314269694499671, 0.00023874416365288198, 0.00035596368252299726, 0.0001689919299678877, 0.00027431434136815369, 0.00030419192626141012, 0.00012352396151982248, 0.00020240416051819921, 0.00022586212435271591, 0.00024124047195073217, 0.00013945165846962482, 9.3149879830889404e-05, 0.00011167088814545423, 0.00023174908710643649, 0.00010658452083589509, 0.00017768720863386989, 0.00010470926645211875, 0.00012311812315601856, 0.000126449711387977, 0.00020995749218855053, 0.00013132188178133219, 0.00018617349269334227, 0.00013198087981436402, 0.00015683335368521512, 0.00020737163140438497, 0.00015387078747153282, 0.00012431343202479184, 0.00013197763473726809, 0.00017408780695404857, 0.00013960848446004093, 0.000108889646071475, 0.00015218023327179253, 0.00028259030659683049, 0.0002292570861754939, 0.00018675319734029472, 0.00022900666226632893, 0.00018700447981245816, 0.00022386570344679058, 0.00014278313028626144, 0.00010815185669343919, 0.0002325736713828519, 0.00022751814685761929, 0.00013433513231575489, 0.00013352363021112978, 0.00016376971325371414, 0.00015785047435201705, 0.0002227206714451313, 0.00027375805075280368, 9.2652342573273927e-05, 0.00029770849505439401, 0.00020620951545424759, 6.7322012910153717e-05, 0.00022654631175100803, 0.00014046975411474705, 0.00024282469530589879, 0.00019734136003535241, 0.00023115410294849426, 0.00010415165888844058, 0.00033580785384401679, 0.00021631369600072503, 0.00021342808031477034, 0.0001275768008781597, 0.00031261754338629544, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 21,127,-1,12,-27,1,34,47,50,-74,-73,42,-9,0,37,-54,-79,19,15,20,35,68,75,89,15,-5,-44,9,-14,22,12,-26,-53,-4,-36,108,-11,40,6,-13,27,-41,-8,27,-105,-35,15,-24,-26,-94,-20,6,11,56,-27,-10,-74,-58,-52,-127,-127,-5,-92,4,-33,37,31,-18,-22,42,36,-16,-21,14,38,2,-4,-37,-81,25,-2,-96,51,-36,-71,-39,-17,10,-106,8,-76,33,72,-7,56,7, -36,-27,-1,98,-5,96,-29,1,53,30,-127,73,-27,-53,-86,127,-90,68,51,83,127,18,110,127,20,24,19,60,1,127,-15,-127,59,75,3,54,62,87,-22,-127,127,-12,83,127,-60,-69,127,-68,-16,-127,-113,-20,6,127,-32,-127,9,32,-112,-80,-45,-127,-38,103,-39,81,110,-35,4,127,127,-12,-60,32,-34,-93,20,-57,-13,127,-11,-56,127,-74,-121,-37,97,51,109,86,-77,-2,127,-24,127,39, 16,-96,7,7,-13,-17,-17,49,29,69,-52,19,-5,47,14,-75,-23,15,3,10,36,48,58,82,13,-29,24,53,2,10,-14,-60,-44,-87,-40,73,-7,-13,14,4,-4,25,-19,43,-40,-18,3,-4,19,-77,27,19,8,-11,6,-7,49,-71,-25,-71,-93,24,-75,-6,31,15,-43,-13,-23,-11,8,2,-13,-32,-12,11,-1,-12,-79,0,-1,-113,30,-17,-2,-29,-7,-21,-81,-6,-22,27,20,36,17,-5, 
  /* [0][1][][] */ 86,-14,55,127,-1,-51,127,47,-35,-127,-107,127,4,-122,-46,33,-74,-44,71,23,-115,1,-127,-68,-12,46,-127,127,-77,75,127,71,17,62,12,127,-127,59,-15,-51,55,-127,17,72,-127,-73,5,-127,-119,-100,-127,15,127,-63,86,-15,-127,2,-59,-7,-72,-55,-43,47,-92,-23,92,-91,-36,41,-48,-127,-127,62,127,-84,93,67,-92,-42,127,-125,-31,102,-48,-15,-1,75,0,23,-68,23,-5,-84,78,-9, -127,-3,-55,125,-85,-127,-109,-127,65,7,-66,36,-84,-127,-42,120,-127,-127,127,127,37,-127,-107,81,-127,127,6,63,-80,-25,-103,70,-127,90,127,-45,23,127,127,-90,-43,22,19,45,-49,-127,-74,-119,-5,-114,-106,127,35,76,70,-71,26,24,97,-37,-51,-32,-127,127,-7,-127,127,127,28,72,-103,-72,-35,49,-101,-127,127,127,110,-46,-78,19,-92,60,-114,-89,127,127,127,127,-127,-127,-88,-50,92,127, 52,-16,92,66,0,-24,6,32,-40,117,-81,65,12,-18,-127,78,19,-33,23,-7,-120,8,-83,-71,-5,12,114,-16,127,99,14,-109,-30,-127,-17,117,-117,9,-31,-40,-10,90,18,94,-19,-23,-8,-87,127,-85,-82,-4,59,-93,-127,23,108,-3,-127,73,-29,-32,-4,51,127,-40,-22,-11,-48,-3,-37,-48,-124,-127,-9,-47,-9,-27,-127,-42,-65,-127,-21,127,-127,16,-9,-3,-35,-11,-11,37,-18,127,21,-11, 
  /* [0][2][][] */ 35,-121,32,-21,16,19,31,55,-42,-47,4,-39,19,2,8,42,-12,22,-6,31,-1,50,6,-34,17,44,-1,5,-21,21,-2,14,-21,-23,-29,-13,43,2,2,-19,-1,10,-17,-28,-21,-31,-9,-7,-9,29,-45,38,-7,-4,-35,-16,-7,1,8,37,-36,-5,40,-3,-32,42,-47,-24,23,2,20,80,-5,20,22,7,-39,-39,1,-1,11,-28,-10,-44,-87,32,-36,-13,-80,31,1,26,-8,-4,7,-11, -45,15,127,-11,127,79,-26,16,-127,13,-86,-51,127,-12,-49,36,22,51,-5,-60,26,19,60,-12,57,-40,-4,42,-12,100,-19,12,-77,21,8,-46,67,48,19,-97,-21,-5,-127,15,-10,-8,-34,-67,-1,-55,-60,99,107,-69,-32,-75,-15,127,-30,11,86,-108,89,80,-20,19,-41,11,127,-22,13,105,-71,15,-16,-49,-14,-85,-27,-40,-11,-73,-22,-75,-92,127,39,5,100,31,43,22,-25,-8,2,0, 15,87,27,-32,0,-8,-14,39,7,64,15,-3,8,7,-3,40,-18,9,-7,32,-18,42,-8,-26,8,32,15,35,13,24,-22,-73,-41,-23,-20,-31,39,-22,-1,-5,-3,-12,8,1,-38,-16,-11,8,25,32,-25,17,-8,-14,5,1,6,3,1,74,-35,9,20,-12,33,14,-64,17,16,-1,14,74,31,-11,-10,6,-21,-18,0,3,-4,-72,-7,-11,-61,27,-36,-21,-84,30,16,23,-15,12,-7,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.010100636631250381, 0.0073676756583154202, 0.0068932347930967808, 0.0077918944880366325, 0.012832745909690857, 0.013453271239995956, 0.012602187693119049, 0.0093093700706958771, 0.012695921584963799, 0.0058986986987292767, 0.005384739488363266, 0.014333995990455151, 0.012621661648154259, 0.0061815204098820686, 0.0065144496038556099, 0.0062397490255534649, 0.0056123295798897743, 0.011840246617794037, 0.0082695372402667999, 0.0057812784798443317, 0.0075658136047422886, 0.013340504840016365, 0.0095686614513397217, 0.010052874684333801, 0.028866194188594818, 0.0098816491663455963, 0.011604965664446354, 0.0062003950588405132, 0.010232046246528625, 0.0044498899951577187, 0.013421179726719856, 0.0095126926898956299, 0.0078083015978336334, 0.0071016191504895687, 0.011071178130805492, 0.016506947576999664, 0.0078365886583924294, 0.01272065844386816, 0.014106159098446369, 0.005728122778236866, 0.0093859992921352386, 0.010473805479705334, 0.011186938732862473, 0.006466730497777462, 0.0043195984326303005, 0.0051784650422632694, 0.010746798478066921, 0.0049425973556935787, 0.0082398112863302231, 0.0048556369729340076, 0.0057093030773103237, 0.0058637969195842743, 0.0097362669184803963, 0.0060897320508956909, 0.0086333416402339935, 0.0061202915385365486, 0.0072727645747363567, 0.0096163535490632057, 0.0071353823877871037, 0.0057647326029837132, 0.0061201406642794609, 0.0080728977918624878, 0.006474002730101347, 0.0050494917668402195, 0.0070569869130849838, 0.013104435987770557, 0.010631238110363483, 0.0086602242663502693, 0.010619625449180603, 0.0086718769744038582, 0.010381226427853107, 0.0066212196834385395, 0.0050152787007391453, 0.010785036720335484, 0.010550599545240402, 0.0062294644303619862, 0.0061918324790894985, 0.0075944210402667522, 0.0073199309408664703, 0.010328128002583981, 0.012694861739873886, 0.004296526312828064, 0.013805505819618702, 0.0095624634996056557, 0.0031218943186104298, 0.010505532845854759, 0.0065139424987137318, 0.011260403320193291, 0.0091512240469455719, 0.010719208046793938, 0.0048297792673110962, 0.015572270378470421, 0.010031020268797874, 0.0098972069099545479, 0.0059160627424716949, 0.014496876858174801, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 9228, 4974, 1372, -1554, 7325, 13844, 10861, 2357, -594, 14809, 1251, -5851, 4401, 4463, 587, -720, 4523, 14969, -522, -8, 4516, 18530, 11517, -2003, -5157, -1356, 16660, 203, 2286, 1764, 12963, -1684, 12015, 3372, 4860, -5034, 1094, -8733, 367, 2665, 3926, 2073, 1972, -537, 1369, 2506, 5436, 5741, 4869, 3568, 6441, 4147, -3229, 2030, 1507, 3129, 2231, 3202, 10248, 1735, -1656, 8621, 6657, 5154, 5093, 10022, -6118, 3102, 6941, -765, 7435, 2420, 5687, 4744, 5177, 3485, -791, 2936, 2983, 3619, 4098, 5074, 11602, 1301, 2927, 5765, 1139, -1473, 24463, -473, 971, -1530, 17746, 3805, -144, -1738, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.081852865871042e-05, 7.340048614423722e-05, 0.00010703154111979529, 0.00012540924944914877, 9.6174102509394288e-05, 5.7320397900184616e-05, 7.7283279097173363e-05, 0.00010916468454524875, 0.00010441346967127174, 5.2885097829857841e-05, 0.00015876667748671025, 8.2913502410519868e-05, 0.00011606565385591239, 0.00010845528595382348, 0.00011232494580326602, 9.8378921393305063e-05, 0.00013162255345378071, 5.0216149247717112e-05, 0.0001030997300404124, 0.00014622935850638896, 0.00013550881703849882, 4.7554276534356177e-05, 7.4174240580759943e-05, 0.000126165512483567, 0.0001097103304346092, 0.00010527252743486315, 5.4058968089520931e-05, 9.5777708338573575e-05, 0.00011105586600024253, 0.00010678702528821304, 6.4181243942584842e-05, 0.00015953132242430001, 6.4817832026164979e-05, 0.00013945218233857304, 0.00014617854321841151, 0.00011823415843537077, 0.0001120415108744055, 6.7134518758393824e-05, 0.00010107655543833971, 0.00012362533016130328, 0.00011864000407513231, 0.00012215139577165246, 0.0001680283312452957, 0.00015686872939113528, 0.00018407226889394224, 0.00014551787171512842, 0.000100914498034399, 0.00010729059431469068, 0.00012213629088364542, 0.00014073518104851246, 0.00010989297152264044, 0.00010616113286232576, 0.00010952207230729982, 0.00017782639770302922, 0.00015183954383246601, 0.00012855725071858615, 0.00014210239169187844, 0.00011328316031722352, 8.1364836660213768e-05, 0.00011339195043547079, 0.00013312073133420199, 8.23422014946118e-05, 8.3549239207059145e-05, 0.00011892119073309004, 0.00011189845827175304, 7.5468728027772158e-05, 9.3598639068659395e-05, 0.00013310335634741932, 8.6983411165419966e-05, 0.00015869129856582731, 9.3368944362737238e-05, 8.8361739472020417e-05, 7.968406134750694e-05, 8.5835912614129484e-05, 0.00010102069791173562, 7.9418961831834167e-05, 0.00011878776422236115, 0.00012180244812043384, 0.00012008177873212844, 0.00014165906759444624, 0.00010294816456735134, 8.3412043750286102e-05, 6.4315718191210181e-05, 9.6473188023082912e-05, 0.00012554264685604721, 0.00011347681720508263, 0.00013441056944429874, 0.00015068618813529611, 3.8735961425118148e-05, 0.00013080031203571707, 0.00015449750935658813, 0.00013123138342052698, 4.7548532165819779e-05, 0.00010355876293033361, 0.00015310042363125831, 8.1234829849563539e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -56,52,-5,-29,-20,-52,-65,-27,72,-41,31,-61,82,-109,5,-127, 
  /* [1][0][][] */ -94,68,-98,-109,-77,26,-11,54,-45,0,93,-48,46,127,25,41, 
  /* [2][0][][] */ -46,-8,-80,11,-5,-47,32,-38,-88,127,71,10,50,64,-42,115, 
  /* [3][0][][] */ -49,-70,11,-36,-81,10,-61,-124,-2,20,38,-78,-64,-43,-127,-50, 
  /* [4][0][][] */ 75,-3,-12,35,-66,-6,-127,32,15,62,22,55,9,-1,-46,-88, 
  /* [5][0][][] */ -95,60,-88,-34,53,-67,-21,-89,90,-28,11,-46,28,-127,-118,-101, 
  /* [6][0][][] */ -14,-40,-32,24,-81,68,38,-34,-18,-48,127,-20,-8,-7,-114,15, 
  /* [7][0][][] */ -22,99,127,-76,64,79,5,-62,43,54,-86,-13,49,-2,30,79, 
  /* [8][0][][] */ -50,10,44,-17,55,8,109,127,-81,-24,-78,-99,40,96,-76,-66, 
  /* [9][0][][] */ 39,46,106,29,-117,-48,-101,-117,69,12,127,30,-41,-100,60,-25, 
  /* [10][0][][] */ -14,-117,10,-77,-127,63,28,27,-35,-57,-3,34,-21,49,-117,23, 
  /* [11][0][][] */ 115,-69,-18,89,-127,-44,65,-1,124,120,-47,53,20,-87,-12,123, 
  /* [12][0][][] */ -61,-68,127,-6,61,-27,26,53,67,-19,89,62,-32,13,-87,34, 
  /* [13][0][][] */ -3,-27,18,17,8,4,127,26,-104,7,11,13,-26,104,97,-63, 
  /* [14][0][][] */ 127,-81,118,-1,67,58,109,56,72,74,57,37,67,-49,42,-55, 
  /* [15][0][][] */ -2,124,16,-48,43,127,-84,74,-49,-29,-44,-18,-46,118,-28,-57, 
  /* [16][0][][] */ -34,57,104,-49,17,72,5,-13,-13,10,-10,45,84,-4,91,127, 
  /* [17][0][][] */ 21,107,90,-127,29,-53,-1,-75,-58,93,-30,68,-60,-36,117,-67, 
  /* [18][0][][] */ -85,-4,-74,-82,118,78,-50,-61,49,77,127,73,-4,102,-48,-12, 
  /* [19][0][][] */ 44,127,85,69,44,-29,-13,1,-32,116,43,106,55,63,-54,39, 
  /* [20][0][][] */ 102,-8,10,58,-63,-14,-36,46,-23,-44,-127,-35,84,-51,26,-14, 
  /* [21][0][][] */ -81,-71,-17,104,-21,-1,-127,61,13,3,24,23,-34,28,-66,3, 
  /* [22][0][][] */ -9,6,-68,-53,127,2,-32,47,53,72,38,63,-21,25,-17,27, 
  /* [23][0][][] */ -71,24,-16,15,8,55,93,80,-20,127,-20,-24,-5,24,-51,-25, 
  /* [24][0][][] */ 38,-74,44,1,127,32,65,-35,50,24,52,30,-71,40,0,-11, 
  /* [25][0][][] */ 119,-67,72,28,14,-3,-34,96,114,-30,-50,10,127,-54,91,49, 
  /* [26][0][][] */ 56,46,110,90,76,-6,-70,-13,8,77,10,127,33,-65,28,-64, 
  /* [27][0][][] */ -54,45,-82,31,-22,122,11,-85,40,-78,122,27,53,-36,127,101, 
  /* [28][0][][] */ -34,30,-66,-127,30,-81,-4,-56,-93,82,-59,24,-23,21,-25,61, 
  /* [29][0][][] */ 87,96,-82,47,32,88,-46,-18,55,53,13,69,-127,20,-25,86, 
  /* [30][0][][] */ -24,81,-120,-69,89,-47,7,21,-57,61,-77,-13,8,63,-20,127, 
  /* [31][0][][] */ 22,-110,81,35,52,-72,-70,29,-26,-6,24,-30,-77,44,41,127, 
  /* [32][0][][] */ -55,66,5,40,-104,60,12,59,16,-127,28,-91,36,50,41,50, 
  /* [33][0][][] */ -65,-12,60,79,-9,13,-44,10,-48,-54,15,-10,-15,-8,14,127, 
  /* [34][0][][] */ -13,7,-87,-94,51,-15,-3,57,14,-13,7,-14,-53,-23,-31,127, 
  /* [35][0][][] */ 76,-5,23,-6,-4,22,-80,-21,-18,-127,-54,16,-2,-27,51,-24, 
  /* [36][0][][] */ -1,24,-116,-17,37,127,-15,37,-21,8,58,34,8,22,-81,44, 
  /* [37][0][][] */ 64,46,72,-54,69,-127,49,-27,-108,69,-100,-34,14,22,97,29, 
  /* [38][0][][] */ -36,127,34,-43,36,20,71,-88,10,-1,-113,34,-56,-99,-84,12, 
  /* [39][0][][] */ 94,53,-124,-123,-16,-29,9,-70,10,-3,-2,-43,61,5,-127,-77, 
  /* [40][0][][] */ -31,24,-67,-86,-41,-14,24,-127,-2,-10,-1,-36,39,65,34,55, 
  /* [41][0][][] */ -41,-94,-11,127,0,-20,-70,-14,-6,-50,65,-71,-71,-7,2,22, 
  /* [42][0][][] */ -21,57,-20,-127,17,13,10,-28,52,-4,-44,12,69,-22,-14,15, 
  /* [43][0][][] */ 7,38,2,15,127,25,27,23,15,34,-6,-76,-108,-49,-20,-10, 
  /* [44][0][][] */ 80,-16,27,41,-30,-14,3,37,26,-34,29,9,127,5,-54,-31, 
  /* [45][0][][] */ 18,-82,-63,33,-40,-88,10,45,27,-19,13,34,-81,127,41,-34, 
  /* [46][0][][] */ -12,-93,54,72,2,-11,-114,49,37,-50,46,-26,29,70,88,127, 
  /* [47][0][][] */ -34,-49,17,79,3,-1,53,21,7,-64,-127,-38,44,-30,-64,17, 
  /* [48][0][][] */ -80,95,-19,-32,6,65,-5,-127,26,-21,34,-58,56,-119,-57,-1, 
  /* [49][0][][] */ -63,11,48,-34,6,11,126,127,-27,-34,-15,18,-49,37,-56,26, 
  /* [50][0][][] */ 49,21,-76,26,29,-127,-42,1,-79,51,-36,4,18,-78,-104,-42, 
  /* [51][0][][] */ -57,64,-33,123,-33,53,-53,-75,-38,-82,-4,-61,-1,41,-17,127, 
  /* [52][0][][] */ -127,10,21,-7,26,44,64,8,11,-81,-46,-47,-104,-56,-121,-8, 
  /* [53][0][][] */ -48,-73,-53,-127,-38,-9,12,73,36,-60,-49,23,-31,26,62,97, 
  /* [54][0][][] */ 12,-53,-3,-13,-70,58,61,-28,-24,-97,57,26,-26,-19,-127,47, 
  /* [55][0][][] */ -20,-36,-38,33,65,-28,61,90,-56,-58,-127,-32,66,-29,-27,38, 
  /* [56][0][][] */ 81,-43,-57,-21,-125,29,-127,-5,-7,-12,-43,12,111,-36,54,12, 
  /* [57][0][][] */ -56,15,16,-26,127,36,54,47,-40,48,2,-11,-54,80,-98,-18, 
  /* [58][0][][] */ 24,5,-4,-18,38,-7,-40,-56,43,-127,-57,-2,-69,-43,-25,56, 
  /* [59][0][][] */ -78,-22,-9,18,19,64,-102,-38,80,127,-79,11,-20,11,-24,-7, 
  /* [60][0][][] */ 20,-54,-2,12,-127,-54,35,4,-5,45,-21,47,-1,-43,43,46, 
  /* [61][0][][] */ 28,39,-96,-16,-46,-16,-127,-88,-17,10,39,118,75,-59,110,67, 
  /* [62][0][][] */ 62,-25,50,-32,-23,32,55,123,-73,127,16,90,31,36,92,125, 
  /* [63][0][][] */ 17,-120,-11,-13,-65,17,44,-22,-7,-18,-3,-17,-33,127,103,31, 
  /* [64][0][][] */ -13,-5,-127,-34,22,55,30,-16,-7,-96,45,-5,67,-33,-68,97, 
  /* [65][0][][] */ -10,-10,68,60,78,-23,75,82,-33,0,-127,-76,36,100,-78,-19, 
  /* [66][0][][] */ -41,-120,-7,-107,-70,-127,43,-37,-12,-39,19,84,-70,-41,-65,83, 
  /* [67][0][][] */ -20,-84,-83,-34,-87,108,-1,-127,-82,-32,-36,-90,23,-19,-56,42, 
  /* [68][0][][] */ 127,43,26,-10,-78,23,-75,-55,-71,-113,-29,-6,42,-28,68,-72, 
  /* [69][0][][] */ 39,9,41,-18,-3,-42,-47,31,-12,127,-25,9,1,36,67,-25, 
  /* [70][0][][] */ 43,-13,-18,69,-106,24,-23,-89,100,127,22,65,51,-60,-8,14, 
  /* [71][0][][] */ 120,-89,78,104,-89,-50,46,-33,127,9,-58,38,71,-79,25,18, 
  /* [72][0][][] */ -2,-40,49,117,67,7,-127,87,97,-12,39,-1,-47,-72,-85,89, 
  /* [73][0][][] */ 75,21,60,-127,59,-92,-77,43,-22,103,-28,22,10,-79,36,-33, 
  /* [74][0][][] */ 87,6,36,48,-127,-32,43,1,-73,-40,15,-38,24,-75,9,23, 
  /* [75][0][][] */ 88,127,-111,18,62,59,-19,-33,-21,-29,55,86,-116,52,62,85, 
  /* [76][0][][] */ -70,-43,1,-50,-57,-11,94,-9,-65,21,94,45,-54,-127,-20,86, 
  /* [77][0][][] */ -53,127,-21,20,-52,-68,37,82,47,-65,-9,72,-29,60,-10,76, 
  /* [78][0][][] */ 127,48,-72,41,-82,42,-121,-23,-14,-22,-69,9,35,-97,29,74, 
  /* [79][0][][] */ -65,-39,127,56,-26,-100,-58,-54,-19,27,11,23,-65,119,-51,64, 
  /* [80][0][][] */ 59,101,31,-127,-8,26,87,-32,11,23,-35,28,78,-53,4,-6, 
  /* [81][0][][] */ 33,-68,13,-111,93,37,-14,127,106,31,-16,-53,-14,21,-91,-65, 
  /* [82][0][][] */ 90,42,85,-3,127,-114,25,47,-8,118,-39,28,-13,-54,47,-102, 
  /* [83][0][][] */ -44,81,11,5,81,61,127,104,-15,51,-22,-73,-85,104,-52,-92, 
  /* [84][0][][] */ -1,-105,-13,106,0,-99,-86,47,-92,72,-63,-18,-127,66,-13,-57, 
  /* [85][0][][] */ -106,47,-40,-4,-18,-49,-42,-33,-18,36,21,-68,-127,-81,-64,50, 
  /* [86][0][][] */ -20,59,91,123,32,-32,62,26,4,29,-46,-79,36,83,-127,-62, 
  /* [87][0][][] */ -17,48,127,-32,-102,-35,22,8,32,-23,9,40,-56,16,-5,-7, 
  /* [88][0][][] */ -33,-75,-113,33,46,44,-9,29,-15,-77,-121,-108,127,-10,4,36, 
  /* [89][0][][] */ 32,24,16,-118,9,-61,-55,57,127,-17,27,-108,8,-39,55,-78, 
  /* [90][0][][] */ 4,69,22,7,-36,38,38,109,1,-58,-10,127,46,15,-36,73, 
  /* [91][0][][] */ -58,3,-21,64,72,54,-46,-106,-42,41,-8,16,-97,-127,-66,-14, 
  /* [92][0][][] */ -25,65,8,-27,-127,-5,-97,61,-37,67,91,81,-15,-29,74,4, 
  /* [93][0][][] */ 107,41,97,52,-127,-78,20,31,-21,-68,-20,-76,26,-51,-2,-1, 
  /* [94][0][][] */ -34,-127,23,-96,16,39,-23,9,79,-18,5,49,16,62,-45,42, 
  /* [95][0][][] */ -39,-67,-25,-53,127,110,-37,45,93,41,-75,59,-28,123,-81,35, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.001498878700658679, 0.0013613019837066531, 0.0019850311800837517, 0.002325868234038353, 0.0017836666665971279, 0.0010630770120769739, 0.001433313125744462, 0.0020245928317308426, 0.0019364757463335991, 0.00098081899341195822, 0.00294452253729105, 0.0015377325471490622, 0.0021525798365473747, 0.0020114362705498934, 0.0020832037553191185, 0.0018245576648041606, 0.0024411014746874571, 0.00093132001347839832, 0.0019121108343824744, 0.0027120027225464582, 0.0025131772272288799, 0.00088195235002785921, 0.0013756521511822939, 0.0023398939520120621, 0.0020347125828266144, 0.0019524079980328679, 0.0010025898227468133, 0.001776315039023757, 0.0020596671383827925, 0.0019804963376373053, 0.0011903198901563883, 0.0029587040189653635, 0.0012021261500194669, 0.0025863116607069969, 0.0027110602241009474, 0.0021927973721176386, 0.0020779471378773451, 0.0012450919020920992, 0.0018745886627584696, 0.0022927832324057817, 0.0022003243211656809, 0.0022654472850263119, 0.0031162912491708994, 0.0029093227349221706, 0.0034138457849621773, 0.0026988072786480188, 0.0018715830519795418, 0.0019898356404155493, 0.0022651671897619963, 0.0026101064868271351, 0.0020380998030304909, 0.0019688883330672979, 0.002031221054494381, 0.003298008581623435, 0.0028160505462437868, 0.002384251682087779, 0.0026354629080742598, 0.0021009750198572874, 0.0015090106753632426, 0.0021029927302151918, 0.0024688870180398226, 0.0015271370066329837, 0.0015495230909436941, 0.0022055392619222403, 0.0020752940326929092, 0.0013996600173413754, 0.0017359014600515366, 0.0024685647804290056, 0.0016132139135152102, 0.0029431246221065521, 0.0017316414741799235, 0.001638776739127934, 0.0014778386102989316, 0.00159193214494735, 0.0018735526828095317, 0.0014729219255968928, 0.0022030647378414869, 0.0022589757572859526, 0.0022270637564361095, 0.0026272409595549107, 0.0019092998700216413, 0.0015469786012545228, 0.0011928138555958867, 0.0017892135074362159, 0.002328342292457819, 0.002104566665366292, 0.0024928087368607521, 0.0027946599293500185, 0.00071840587770566344, 0.0024258519988507032, 0.0028653456829488277, 0.0024338469374924898, 0.00088184583000838757, 0.0019206241704523563, 0.0028394351247698069, 0.0015065994812175632, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -33951, -6117, 4081, -17744, 15538, -16671, 27989, -13143, 15411, -12496, 15709, 13969, -4262, -36418, 954, 6717, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.6380340033210814e-05, 4.1631799831520766e-05, 4.9101188778877258e-05, 4.5049298933008686e-05, 8.4174309449736029e-05, 0.00011332652502460405, 4.3613039451884106e-05, 4.6843451855238527e-05, 7.7250486356206238e-05, 7.8578850661870092e-05, 8.8569933723192662e-05, 6.5986227127723396e-05, 6.6857195633929223e-05, 7.1294867666438222e-05, 5.3958974604029208e-05, 6.3843290263321251e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 17,29,14,16,-14,-75,-7,-2,-21,-68,15,-6,57,-62,51,35,-85,-27,39,2,78,25,-64,15,-4,62,127,66,9,77,61,-42,9,-2,5,-23,33,30,-9,-12,117,17,25,-16,-6,-12,8,-38,28,-35,90,1,-67,0,42,36,-6,-37,10,15,-15,31,-66,-9,12,-7,69,34,-2,-26,19,23,10,36,12,28,60,-36,51,17,-12,48,33,36,-52,13,-12,71,12,10,-84,-17,18,9,103,74, 
  /* [1][0][][] */ 21,38,-52,-17,-2,-46,94,-75,-65,-43,-68,-47,-1,-49,-7,-58,-35,-30,-29,-13,-11,-93,120,-36,-3,17,4,65,-50,5,-37,19,-31,26,18,7,-27,53,-60,87,33,12,-4,-44,55,-58,-11,33,-89,-2,55,-111,-43,46,62,60,36,21,-69,16,-42,3,-12,-20,36,30,104,6,-41,-127,11,9,20,70,-25,38,-58,-34,104,-28,39,-10,54,-65,-31,-64,-17,14,-18,-49,30,-3,74,-54,-38,54, 
  /* [2][0][][] */ 11,-21,14,-7,59,47,-55,22,-54,39,18,-24,30,-11,24,27,25,-24,-127,-6,-14,-45,-13,18,-1,-14,-47,19,-33,-22,-21,70,-19,-32,1,11,-45,22,-20,-16,74,14,1,43,7,55,3,-9,-85,6,-15,12,-20,50,9,-63,33,18,42,36,-21,-7,-17,51,43,-2,-38,-6,-1,-1,-9,-35,18,47,23,67,-56,-7,-29,-33,35,36,53,-18,-15,-39,-9,-52,-12,-32,-17,64,-1,-6,83,-43, 
  /* [3][0][][] */ 43,-41,-23,-113,-12,-27,117,-35,30,127,-76,-17,3,-28,-17,61,64,46,-31,22,-46,18,16,2,-49,86,51,-1,-42,-16,-75,71,-5,-17,34,-31,6,-58,-25,64,6,16,-25,21,64,-51,-6,36,51,-27,31,-44,111,37,29,-8,-3,-24,-12,-50,-39,43,75,-8,-28,-23,121,-41,-41,-13,-55,23,17,-77,4,-78,14,-51,126,-8,-5,-59,-35,-51,-31,-44,76,76,-39,51,-64,1,8,-88,-17,30, 
  /* [4][0][][] */ -32,79,34,10,-12,5,-33,-17,17,-28,-1,-15,22,39,-26,22,-10,-37,-16,-75,30,-29,-59,20,-26,-37,-19,14,-39,127,-48,-15,9,-45,0,-25,66,46,-37,-1,18,8,14,-36,-49,-5,49,-18,19,-14,-66,-6,-60,26,46,24,6,58,-19,15,-30,-74,-27,8,53,25,-60,-6,-4,-3,8,-69,-14,57,56,58,-32,13,-56,35,15,63,25,-59,47,-65,-33,-62,-42,-45,-46,-10,3,12,31,-25, 
  /* [5][0][][] */ -3,-9,37,-17,-8,-24,-17,0,36,10,-15,-1,-21,-30,20,-17,-8,1,-54,-36,-24,14,-25,15,18,-46,66,-20,-6,41,10,74,-10,-86,18,12,-35,-27,-30,3,-52,-5,-20,9,1,19,-71,22,-16,14,48,-9,25,-75,2,15,-25,-53,5,-36,38,20,23,48,-42,6,109,-20,-7,-27,8,15,0,26,39,7,-6,-12,127,36,-22,-15,-27,30,44,61,4,94,0,-32,-6,10,9,-13,-28,21, 
  /* [6][0][][] */ 21,-60,73,10,-46,116,-52,-99,-28,-87,-89,58,12,15,-36,96,4,44,22,-42,-91,-27,-85,-67,9,-60,-14,73,-119,55,-24,-34,47,93,-19,-2,-1,-39,16,-21,-60,37,36,-30,17,52,-96,-3,49,10,-89,-127,85,14,-40,-18,28,-30,28,-18,-13,-45,39,-1,60,-79,-71,-67,-103,17,-10,-82,-34,-106,23,-113,92,13,-79,50,-37,92,19,-101,67,-40,-12,-1,-74,80,-87,90,48,-48,67,-105, 
  /* [7][0][][] */ -7,-17,-68,68,-36,4,37,-2,-101,7,92,57,-7,-62,4,-41,-12,-4,-5,2,-53,-27,-46,-46,69,48,-9,77,1,28,20,34,-59,-127,35,115,-7,17,-43,11,-4,-7,9,-77,28,59,75,91,-17,46,-46,0,33,-50,42,-55,-17,38,-80,-22,62,14,12,-34,81,-53,108,-14,-60,-25,76,-1,-12,-29,-79,-27,26,-39,99,-39,2,-12,-74,-34,47,18,-76,45,-7,21,1,32,66,-8,94,-11, 
  /* [8][0][][] */ -13,-54,12,4,-8,-9,20,-3,-14,-1,48,42,14,30,-45,-4,68,0,12,-4,-14,-70,-36,-16,-23,-38,72,1,-23,50,4,-34,-11,-6,-3,4,-42,-15,13,-25,-2,40,25,-40,11,-19,26,-11,36,-2,44,6,-6,10,-40,3,-15,109,-60,-4,-18,-65,-63,-2,-88,-38,-17,21,-11,7,34,-22,-24,-127,44,-103,13,14,-55,18,-30,-8,-2,60,66,-58,-42,54,-39,85,15,-19,-50,3,-4,-59, 
  /* [9][0][][] */ -24,-28,-29,24,1,20,1,37,-39,0,64,55,-27,51,27,-48,-15,30,-21,-40,4,35,-6,6,-23,25,5,17,34,-9,14,-6,-16,-18,8,50,-22,-6,24,3,-7,-24,9,4,11,45,3,39,-44,10,-12,27,127,19,-14,0,15,-14,30,14,-28,6,82,8,16,24,59,7,32,-4,-17,22,5,-123,-37,-117,-32,-11,36,0,-2,35,6,-38,37,15,-49,-4,0,111,34,28,54,31,-10,26, 
  /* [10][0][][] */ 25,39,10,0,-19,18,-45,-23,63,5,-34,22,16,6,-1,-57,-34,-2,18,3,23,-16,-21,-33,10,-16,-95,45,-16,49,-5,12,16,26,-15,0,9,1,3,3,40,-7,57,-41,-30,0,16,24,17,2,15,-27,-19,-15,-5,32,-13,5,-15,-4,-9,-33,-3,7,0,-13,-93,-31,-47,-13,48,-13,-23,33,32,20,46,-19,-93,12,-8,35,3,-8,4,5,-66,-127,-20,23,8,18,53,-30,20,27, 
  /* [11][0][][] */ 24,-43,4,6,-60,35,11,11,71,-18,-17,-42,18,7,15,-8,-26,47,20,-60,6,30,16,-26,37,9,60,-2,26,-55,-28,17,20,103,-99,7,13,-12,58,11,-45,49,-17,17,-42,-2,-12,-7,52,-17,-22,-15,-18,19,-77,91,-30,3,-2,-31,24,7,-6,-62,-2,-42,-127,-74,-4,-35,-89,28,54,19,-6,-2,39,56,-111,-34,-7,-6,-14,0,-20,-1,59,76,22,-46,11,4,-35,26,76,30, 
  /* [12][0][][] */ 22,28,-38,-22,17,-23,1,33,52,-38,23,0,-3,-17,0,11,12,-45,-28,16,9,52,0,47,-42,-34,-127,-9,73,-28,27,-4,-22,-74,68,-6,34,-14,-1,19,-7,-55,15,31,41,2,26,-19,-67,-5,-51,93,76,-22,29,-75,12,26,-42,-31,14,53,80,5,-13,-14,30,28,112,28,21,27,7,-20,-13,-5,-37,-52,42,-70,26,-51,35,-37,4,7,3,-108,-5,37,-42,18,17,64,15,38, 
  /* [13][0][][] */ -17,19,-65,22,28,12,-10,9,26,60,-37,40,-41,-20,59,-44,7,48,61,10,-25,-38,-1,15,44,43,-20,21,6,37,53,-19,-10,60,-2,49,16,-36,-49,-50,5,-13,18,16,43,49,-28,44,-48,32,-4,2,-14,-34,61,41,16,-41,-12,-15,23,15,3,-27,12,83,127,36,18,-1,-46,-16,34,52,-76,50,18,-70,125,-34,-15,-28,20,1,24,58,-33,-17,-15,-24,9,46,43,16,54,55, 
  /* [14][0][][] */ -5,49,18,24,-57,-40,23,36,-71,-21,72,12,-78,-3,68,-22,-43,39,-60,22,-21,21,-94,11,-50,1,-50,-106,11,-2,26,75,-58,28,15,-17,-25,-68,-7,-42,24,-30,44,-25,-8,44,-75,25,-8,-44,78,26,-12,22,-26,28,-51,27,4,35,33,60,-6,40,14,-47,4,-66,37,58,69,30,-48,31,12,9,27,-10,37,15,-62,110,3,-127,82,-5,-5,11,-104,-13,-18,-1,-30,9,39,31, 
  /* [15][0][][] */ 76,-36,21,26,36,13,-17,-12,19,26,-55,-13,63,61,-1,-15,-7,7,-73,58,1,-34,18,23,63,-33,82,31,49,-32,-46,69,60,61,4,-76,59,64,70,53,87,40,-17,2,-40,-118,33,-39,-27,-22,-12,-10,-10,-49,-34,48,-11,3,-16,21,8,-45,-33,25,38,47,-81,33,-7,-26,-2,-5,2,-116,-48,-96,-18,24,-127,37,82,-32,46,25,-57,-5,-2,-24,42,84,13,-66,-32,-34,30,-42, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0040304819121956825, 0.0021968509536236525, 0.0025909999385476112, 0.0023771876003593206, 0.0044417586177587509, 0.0059800799936056137, 0.0023013981990516186, 0.0024718623608350754, 0.0040763984434306622, 0.0041464944370090961, 0.0046737096272408962, 0.0034819995053112507, 0.0035279593430459499, 0.0037621287629008293, 0.0028473385609686375, 0.0033689197152853012, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 11708, -776, -7678, 9389, 888, 2770, 158, -1012, 2845, -5845, 64, -3079, 13428, -4765, -2512, -9795, 446, 286, -15114, -1270, -4077, -1342, -9963, -1227, 48, 12272, -14333, -6627, -1628, -4808, -647, -805, 28013, 979, -3384, -611, 119, 16483, 4530, 15450, -1236, 9194, 1271, 7386, 1317, -542, 13740, 1988, -7774, 21, -4942, 173, 640, -4746, -555, 2754, 2383, 3435, 935, 2044, -666, 1026, 110, 10513, 10967, 275, 21350, 13002, -1133, 65, 13201, -1617, 3, 1005, -5872, -237, 25470, 13007, 17845, 16562, 18551, -1713, 8260, 10583, -1179, -323, 13004, -10242, 14528, 724, -10974, -2369, -677, 157, 29629, -1857, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.3937691417522728e-05, 0.00019197179062757641, 0.00012620208144653589, 0.00010643352288752794, 0.00014146216562949121, 0.0003709227021317929, 7.1664522693026811e-05, 0.00016034486179705709, 0.00026848207926377654, 0.00016788904031272978, 0.00022551704023499042, 0.00011881889076903462, 7.5039068178739399e-05, 0.00011610388173721731, 0.00015711330343037844, 0.00012108881492167711, 0.0001968980795936659, 0.00019814317056443542, 7.3271745350211859e-05, 0.0002695358416531235, 0.00016460653569083661, 0.00019220700778532773, 5.6938195484690368e-05, 0.00013839516032021493, 0.0012654786696657538, 0.00010636217484716326, 0.00016030282131396234, 0.00011546963651198894, 0.00023660594888497144, 0.00012255035107955337, 0.00011652443208731711, 0.00023915231577120721, 4.4182630517752841e-05, 0.0002995941904373467, 8.9831162767950445e-05, 0.00013803975889459252, 0.00025719797122292221, 7.8860641224309802e-05, 0.00017805668176151812, 7.8087497968226671e-05, 0.0003869659558404237, 0.00012552370026241988, 0.00015177539899013937, 0.00012139946920797229, 8.4169056208338588e-05, 0.00019466204685159028, 9.4470771728083491e-05, 0.00017728112288750708, 0.00013562335516326129, 0.00028298140387050807, 0.00019309941853862256, 0.00015151347906794399, 9.4677910965401679e-05, 0.00019011240510735661, 0.00019516695465426892, 0.00017003448738250881, 9.0297136921435595e-05, 0.00024349259911105037, 0.00023408031847793609, 0.0002341667131986469, 0.00016455387230962515, 0.00021930811635684222, 0.00010354416735935956, 8.7961030658334494e-05, 0.00022236490622162819, 0.00029740022728219628, 7.6044198067393154e-05, 0.00010510377614991739, 0.00025297547108493745, 0.00021342023683246225, 0.00010712909715948626, 0.00021919904975220561, 0.0003778914688155055, 0.00011098378308815882, 0.000104916027339641, 0.00013535149628296494, 5.2503608458209783e-05, 0.00011827322305180132, 7.8387223766185343e-05, 0.00011920516408281401, 5.4786829423392192e-05, 0.00021069694776087999, 8.2830469182226807e-05, 0.00024435046361759305, 6.8065040977671742e-05, 0.00019186892313882709, 0.00010673960787244141, 0.00015798283857293427, 7.9558492871001363e-05, 0.00014489813474938273, 8.4762032201979309e-05, 0.00017251083045266569, 0.00020581335411407053, 0.00013890249829273671, 5.4183452448341995e-05, 0.00020881506497971714, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -50,-10,4,-34,90,-10,32,-14,-7,1,-11,-29,-29,2,-6,-17,-15,1,-12,-12,1,30,17,50,-1,-27,-24,-4,20,-2,25,1,-13,1,0,-31,-2,-57,-46,-7,2,-8,31,-28,-26,33,-66,-21,-20,4,-7,52,-74,5,41,-8,-7,-8,5,-16,-10,-18,-15,-31,-23,-24,-41,-24,-12,28,-4,1,27,7,4,1,-10,12,127,-16,-109,7,-88,-14,-32,-21,26,17,-29,-22,12,-32,-7,32,-22,8, -21,38,53,-76,-41,-6,127,-59,-2,-10,-33,5,-56,1,-85,82,-8,69,75,-26,0,127,95,127,34,-9,53,60,127,42,127,-34,-127,-20,-86,-31,-23,-74,127,-68,-25,-127,-17,-48,63,-32,-38,-9,47,3,23,127,-104,36,-77,-6,-83,-4,-6,26,-13,-127,-127,-62,-49,-4,-4,-83,-11,14,-65,112,-127,-9,17,-22,-117,-74,-4,-75,-127,5,34,-51,116,72,-54,35,-127,-5,33,-17,11,127,-52,-89, -33,1,-3,-17,50,-8,45,-28,-22,14,-11,-6,-3,1,-5,-26,-11,-5,-23,-21,0,11,22,35,-1,-19,5,-18,6,5,17,6,-23,0,-11,50,-2,-58,-43,8,-3,3,13,-15,-16,-27,-56,-28,-11,-7,-5,34,-4,-5,11,-10,48,-16,7,-21,-10,-9,-49,-11,-26,-33,127,-19,-6,22,1,11,12,11,8,24,-8,32,-40,-8,-97,0,-95,-11,6,-32,22,-14,-36,-41,13,40,2,28,-19,13, 
  /* [0][1][][] */ -84,-8,38,-47,43,87,-37,-20,-4,-11,-22,-17,-127,27,22,72,-17,37,98,22,27,-14,118,-19,40,29,67,20,-8,0,-11,-16,-126,-17,75,-15,-10,-127,-59,-127,-13,-15,82,-32,-73,127,-94,-76,55,62,17,-46,-127,71,65,-23,22,-31,34,-10,12,-11,91,-74,-25,15,-26,-58,-7,-3,-127,18,74,127,14,-73,-127,-56,-68,-56,-65,-7,-16,-48,39,19,-96,56,-57,127,90,-75,127,9,-55,-3, 108,127,127,127,-127,-127,106,-67,127,127,-72,-59,-84,127,-26,127,127,-127,127,127,127,-76,98,-119,-127,-127,127,127,-111,127,-27,127,-65,127,127,-91,127,77,12,-10,127,-7,-127,-108,127,-27,127,127,127,-127,127,-112,112,127,-127,127,-127,127,-127,127,-102,113,102,-127,127,127,-14,127,-104,-127,-20,-127,19,123,127,76,-7,-127,95,-127,53,127,127,127,127,64,-127,127,-100,51,-10,-22,-85,-18,-127,-34, -127,-32,33,-64,2,47,-53,0,-38,-11,-1,127,-111,21,25,55,-26,48,73,8,13,-19,79,-18,39,14,44,4,-9,-5,11,-13,-96,-32,82,127,-3,-99,-79,-70,-24,-15,21,-37,-66,-62,-90,-105,42,68,-6,-28,127,15,90,-40,85,-28,47,-41,2,-33,-118,-31,-57,-10,-57,-74,-15,5,-107,4,31,-94,7,127,-92,-40,-57,-4,-87,-15,-50,-74,-1,24,-83,46,-24,-80,127,127,-40,-19,-71,-4, 
  /* [0][2][][] */ -20,-42,-17,-8,27,-4,2,17,-10,7,32,-29,44,2,-5,-33,-6,-3,-42,-18,-12,-8,23,-17,6,-16,-12,1,5,-8,-20,6,-10,-5,6,-23,-7,-29,-18,-22,-21,1,21,11,25,15,-62,5,-34,1,-21,-18,-4,-30,29,-15,2,-20,6,-18,-5,13,-1,-1,-30,-26,120,13,31,19,-1,1,-9,-18,-5,-24,-17,18,-34,-30,-11,2,-75,-19,-13,-6,34,-18,12,0,-7,-14,-10,-15,-34,-3, -20,-58,22,-96,-47,-4,57,127,-54,59,127,-23,-56,17,127,86,-14,-29,83,-44,-18,-31,127,19,20,-22,31,10,-6,8,-83,-45,-80,-35,-94,-9,-89,-77,53,-77,-19,-123,-40,127,29,-18,-53,0,22,-7,-12,-7,55,24,-55,-36,-52,-52,42,-54,127,20,102,1,-83,-56,-26,-53,127,24,-36,15,26,-26,23,-29,-20,-38,-3,31,-92,-23,-66,-70,39,-127,-14,11,-32,3,38,4,14,-121,-84,127, -24,8,-20,-2,16,-11,7,14,-22,0,15,41,50,-3,-4,-37,-7,13,-13,-24,-13,-1,9,-5,-2,-16,-18,-10,1,-1,-28,3,-3,-2,2,-4,-8,-49,-25,-3,-27,-7,-2,5,20,-2,-57,12,-32,-6,-15,-16,-4,-31,21,-10,49,-12,10,-21,3,13,-8,19,-19,-25,-28,15,27,7,-8,0,-48,-34,-8,-18,-23,15,98,-15,-8,-2,-49,-6,-15,2,40,4,16,1,-10,19,-2,-22,-26,-5, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0060324156656861305, 0.012327890843153, 0.0081043438985943794, 0.0068348627537488937, 0.0090843038633465767, 0.023819617927074432, 0.0046020951122045517, 0.0102968979626894, 0.017241166904568672, 0.0107813635841012, 0.014482072554528713, 0.0076302164234220982, 0.0048187989741563797, 0.0074558663181960583, 0.010089376010000706, 0.0077759847044944763, 0.01264424342662096, 0.012724199332296848, 0.0047053061425685883, 0.017308836802840233, 0.010570570826530457, 0.012342995963990688, 0.0036564115434885025, 0.0088873496279120445, 0.081265494227409363, 0.0068302811123430729, 0.010294198058545589, 0.0074151367880403996, 0.015194171108305454, 0.0078698405995965004, 0.0074828728102147579, 0.015357691794633865, 0.0028372847009450197, 0.019239099696278572, 0.0057687056250870228, 0.0088645266368985176, 0.016516532748937607, 0.0050642094574868679, 0.011434301733970642, 0.0050145606510341167, 0.024849869310855865, 0.0080607803538441658, 0.0097465906292200089, 0.0077959340997040272, 0.0054051009938120842, 0.012500651180744171, 0.0060666482895612717, 0.01138449739664793, 0.0087093524634838104, 0.01817227341234684, 0.012400303967297077, 0.0097297709435224533, 0.0060799503698945045, 0.012208485975861549, 0.012533075176179409, 0.010919138789176941, 0.0057986294850707054, 0.015636412426829338, 0.015031982213258743, 0.015037531033158302, 0.010567189194262028, 0.014083352871239185, 0.0066493162885308266, 0.0056486111134290695, 0.014279651455581188, 0.019098209217190742, 0.0048833452165126801, 0.0067494702525436878, 0.016245376318693161, 0.01370524987578392, 0.0068795308470726013, 0.014076349325478077, 0.024267131462693214, 0.0071270675398409367, 0.0067374133504927158, 0.0086918938905000687, 0.003371634753420949, 0.0075951749458909035, 0.0050338078290224075, 0.0076550217345356941, 0.0035182568244636059, 0.013530367985367775, 0.0053191408514976501, 0.015691502019762993, 0.0043709464371204376, 0.012321284972131252, 0.0068545187823474407, 0.010145215317606926, 0.0051090237684547901, 0.0093049528077244759, 0.0054431804455816746, 0.011078162118792534, 0.013216757215559483, 0.0089199291542172432, 0.0034795096144080162, 0.013409518636763096, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1804, 10286, 386, 2204, 5866, 18548, 177, 3215, 15053, -1570, 21469, 5730, 3096, 579, 6226, 470, 4899, 6462, -480, 12756, 1436, 11763, -2071, 2265, -12922, 1564, 3697, 2458, 10657, 1788, 4233, 5588, 2294, 15647, 4654, 5060, 5161, 2535, 6174, 3767, 21537, 2141, 3601, 2188, 4479, 10083, 8984, 10324, 1654, -1693, 2581, 7533, 3866, -4971, 10877, 220, 3397, 20821, 1653, 2925, 3508, 17092, 5733, -333, 19576, 17082, 2792, 4557, 9524, 6280, 2456, 2088, -5182, 6080, 2644, 4440, 563, 13431, 5377, 6957, 4542, 1571, 7147, 18620, -228, 12164, 7058, 2597, -931, 4061, 1924, 16580, 4541, 5571, 7252, 7506, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00016279787814710289, 7.562905375380069e-05, 0.00024066798505373299, 0.00016903274809010327, 0.00011308479588478804, 5.0002388888970017e-05, 0.00018287269631400704, 0.00010375328565714881, 5.8240417274646461e-05, 0.0001197189194499515, 4.003997310064733e-05, 8.4548344602808356e-05, 0.00010135276534128934, 0.00029109022580087185, 9.121721814153716e-05, 0.00011169578647240996, 0.00012261944357305765, 9.8002681625075638e-05, 0.0001095361149054952, 6.8618261138908565e-05, 0.00016417042934335768, 6.4045176259241998e-05, 0.00012035712279612198, 0.00010844800999620929, 5.806731860502623e-05, 0.00013183946430217475, 0.00013253799988888204, 0.00014282185293268412, 8.1296813732478768e-05, 0.00014826493861619383, 0.00013264793960843235, 9.4303868536371738e-05, 0.00017336256860289723, 5.4062456911196932e-05, 0.00010954429308185354, 0.00011762486246880144, 0.00011618975986493751, 0.00016029078688006848, 8.0025623901747167e-05, 0.00011555141827557236, 4.3121995986439288e-05, 0.00012646942923311144, 0.00010877854947466403, 8.2010636106133461e-05, 8.5045809100847691e-05, 8.5459607362281531e-05, 7.8918776125647128e-05, 7.4010735261254013e-05, 0.00017336204473394901, 0.00013904820661991835, 0.00015433905355166644, 9.1963716840837151e-05, 0.00012983741180505604, 8.5345396655611694e-05, 6.7348963057156652e-05, 0.00022487412206828594, 0.00010041364294011146, 4.2625884816516191e-05, 0.00012281187810003757, 9.892832167679444e-05, 0.00011984274169662967, 5.1037575758527964e-05, 0.00011139536945847794, 0.00016417987353634089, 4.8124318709596992e-05, 5.1723221986321732e-05, 0.00015142688062041998, 0.0001278119016205892, 8.0853555118665099e-05, 7.911402644822374e-05, 0.00019682152196764946, 0.00010654771176632494, 0.00010797684080898762, 0.00010311630467185751, 0.0001392712292727083, 0.00013992589083500206, 0.00014790245040785521, 5.9640187828335911e-05, 0.00010817851580213755, 0.00011768469994422048, 9.2545902589336038e-05, 9.4199189334176481e-05, 6.8490495323203504e-05, 5.0113994802813977e-05, 9.9631026387214661e-05, 6.0214781115064397e-05, 9.758860687725246e-05, 0.00015524377522524446, 0.00014910873142071068, 0.00014417830971069634, 0.00011458719382062554, 5.2228642744012177e-05, 0.00010813063272507861, 7.8030054282862693e-05, 7.7199183579068631e-05, 8.7553788034711033e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,3,-4,55,-127,-16,95,42,54,76,-26,34,14,-4,34,82, 
  /* [1][0][][] */ -23,35,-100,-2,127,107,3,-4,-35,17,-56,39,-61,95,-51,-34, 
  /* [2][0][][] */ -37,60,81,1,67,84,4,35,41,-4,38,-16,58,-127,-11,8, 
  /* [3][0][][] */ 127,-29,24,2,30,31,-11,11,35,34,-59,-22,-43,52,-25,55, 
  /* [4][0][][] */ -81,-18,6,36,-104,-5,-89,-23,-7,36,-5,-49,-16,37,-43,127, 
  /* [5][0][][] */ -94,10,33,17,127,28,2,14,-44,33,-22,13,-62,55,-90,-37, 
  /* [6][0][][] */ -127,23,-42,29,-10,-66,72,20,6,-33,-47,37,10,-2,-41,16, 
  /* [7][0][][] */ -8,104,46,-85,60,53,127,14,39,-5,4,50,80,32,-34,8, 
  /* [8][0][][] */ -29,-31,-74,52,-56,84,-45,-78,25,-41,84,41,127,41,-100,8, 
  /* [9][0][][] */ -20,-127,-16,79,-35,-60,-17,54,50,49,3,60,-76,8,-9,-37, 
  /* [10][0][][] */ -43,-62,-118,54,-127,124,63,-86,5,-80,62,-49,43,116,-84,84, 
  /* [11][0][][] */ -44,-122,-32,27,-2,94,27,-12,27,19,36,-98,21,115,-127,120, 
  /* [12][0][][] */ -38,-107,-89,109,-106,-127,19,73,82,66,-35,104,-8,-63,-31,-5, 
  /* [13][0][][] */ -59,-19,-31,-7,-17,1,32,13,-18,127,-12,-21,40,29,19,-11, 
  /* [14][0][][] */ -123,-26,-53,-47,-26,97,-28,-102,127,-72,78,2,92,-62,-98,-89, 
  /* [15][0][][] */ 3,-127,96,-51,-53,-34,7,55,19,-49,-92,-35,86,-38,-28,-48, 
  /* [16][0][][] */ -27,-39,29,-35,36,23,-23,-24,68,-127,35,-23,-8,2,-76,-97, 
  /* [17][0][][] */ -20,9,31,-58,25,-4,-40,-3,95,-55,20,67,107,-77,-25,-127, 
  /* [18][0][][] */ 79,3,-36,-123,7,-26,127,-46,29,62,-11,61,-4,80,-5,-123, 
  /* [19][0][][] */ -33,-35,-35,-71,-113,42,-10,-9,28,-46,20,-127,-12,-24,-14,-7, 
  /* [20][0][][] */ 22,80,77,-92,73,-7,-57,99,-106,-127,40,-83,-35,120,-25,-20, 
  /* [21][0][][] */ 20,-93,-127,-11,85,41,90,84,-86,-91,-17,9,110,-111,-22,34, 
  /* [22][0][][] */ 51,-9,77,-15,2,6,62,27,20,127,26,22,-8,-4,117,-8, 
  /* [23][0][][] */ -118,-64,-21,60,62,47,23,2,-4,10,0,-93,-2,66,61,127, 
  /* [24][0][][] */ 14,-13,32,33,15,-94,11,-61,23,127,-110,77,-22,-64,81,-70, 
  /* [25][0][][] */ 125,-67,110,127,47,4,-23,36,-119,88,52,-68,-18,18,70,-23, 
  /* [26][0][][] */ -21,22,13,44,-53,111,-20,40,-56,-33,-81,36,5,23,42,-127, 
  /* [27][0][][] */ 40,-2,-9,-52,-53,-1,-85,11,-113,-24,-66,-41,-76,44,-18,127, 
  /* [28][0][][] */ -61,18,26,3,20,-18,-127,-2,-7,-30,-7,-13,16,-52,-65,-31, 
  /* [29][0][][] */ -23,-121,-24,101,-26,5,127,9,82,60,-110,69,36,-22,-51,77, 
  /* [30][0][][] */ 40,-48,-60,5,-127,33,61,-38,15,-4,4,-28,-19,49,-15,78, 
  /* [31][0][][] */ -127,-16,3,93,-42,12,-47,-7,-34,-60,8,-37,-21,-62,-14,105, 
  /* [32][0][][] */ -127,-78,-93,-2,-89,-42,0,-7,111,47,-47,-60,34,42,26,-14, 
  /* [33][0][][] */ -7,11,-89,32,-127,-88,55,-14,-114,16,-58,-60,-21,90,72,67, 
  /* [34][0][][] */ 32,56,2,37,-67,-42,35,15,19,-127,-16,38,-26,4,38,91, 
  /* [35][0][][] */ 46,-9,-64,-14,-127,12,80,-34,30,43,-16,-11,25,62,36,61, 
  /* [36][0][][] */ -6,0,-56,56,127,-18,48,65,-87,16,-81,-81,26,-20,8,30, 
  /* [37][0][][] */ -127,46,-8,-69,41,-95,-47,-29,-15,-29,-20,46,54,-74,10,-124, 
  /* [38][0][][] */ 41,95,33,-63,-99,-66,-127,-52,-42,-67,46,63,-67,-99,78,-11, 
  /* [39][0][][] */ 6,-52,13,75,19,76,75,-51,-18,53,9,-21,-7,127,50,105, 
  /* [40][0][][] */ 103,47,68,83,-62,-48,5,17,-82,55,-13,-18,-37,-26,127,9, 
  /* [41][0][][] */ -28,-8,5,53,-100,121,2,55,-62,24,-110,13,15,33,47,-127, 
  /* [42][0][][] */ 13,-108,31,-13,127,25,56,17,-19,-96,-98,-23,-12,-16,-8,28, 
  /* [43][0][][] */ -43,-110,-51,15,127,11,-7,111,-79,-77,-126,-85,127,-9,-65,67, 
  /* [44][0][][] */ -44,-52,-76,-96,35,79,71,18,-39,-127,-67,69,-50,57,31,116, 
  /* [45][0][][] */ 2,-51,-64,-8,-127,71,-27,-59,53,-44,20,-41,4,14,-31,38, 
  /* [46][0][][] */ 29,-91,-20,5,91,-85,-14,97,-3,-32,38,66,-51,-54,58,-127, 
  /* [47][0][][] */ -72,-23,-7,96,-14,1,34,39,3,127,87,96,-40,81,-1,97, 
  /* [48][0][][] */ 41,-15,-77,-85,35,-61,6,55,46,-73,-4,25,-54,8,-44,-127, 
  /* [49][0][][] */ 54,40,6,34,-14,-22,48,45,-33,127,-40,38,-42,-28,72,89, 
  /* [50][0][][] */ 8,1,14,13,-127,-20,-13,-46,57,22,22,55,-21,-63,15,-4, 
  /* [51][0][][] */ 20,-3,-15,-127,-32,101,57,-55,4,0,42,-58,72,74,-24,22, 
  /* [52][0][][] */ 17,-26,-5,-85,74,-104,-7,-31,33,-5,127,-59,36,3,-28,95, 
  /* [53][0][][] */ -42,-60,51,-28,-44,-127,24,-107,-8,90,-101,77,-31,-21,35,-81, 
  /* [54][0][][] */ 65,60,42,-13,-127,-39,-86,-96,-11,9,47,69,-68,-52,55,11, 
  /* [55][0][][] */ 20,15,-38,71,-40,22,42,-20,2,127,24,58,1,-1,3,49, 
  /* [56][0][][] */ 38,-108,-76,86,-79,46,-2,64,127,3,59,47,-25,-25,52,97, 
  /* [57][0][][] */ 44,25,105,-89,98,-8,-13,-3,92,-29,12,127,58,-59,104,-64, 
  /* [58][0][][] */ 82,-55,18,-73,36,12,-6,127,52,101,-6,66,46,13,88,-9, 
  /* [59][0][][] */ -46,44,29,-51,-3,-93,3,5,0,18,-127,-110,-127,-55,87,-10, 
  /* [60][0][][] */ 41,-31,20,22,15,-21,8,-52,25,127,-11,70,-8,-22,-17,-31, 
  /* [61][0][][] */ 58,54,13,-22,-87,-127,-22,-53,-66,-19,-21,19,-69,-42,85,81, 
  /* [62][0][][] */ -29,87,-43,34,-59,127,-41,30,-63,3,-35,30,-30,36,60,-82, 
  /* [63][0][][] */ 36,-3,-65,-127,-19,-44,87,-15,1,-100,-29,37,-37,73,39,-29, 
  /* [64][0][][] */ -35,14,6,-21,47,-58,33,83,-127,-20,-69,-40,-25,84,60,66, 
  /* [65][0][][] */ -63,-10,-46,-25,63,44,-37,-80,-127,-58,12,-31,-112,98,-51,52, 
  /* [66][0][][] */ -20,61,-12,28,-48,127,-19,20,-65,18,-27,44,-33,50,49,-81, 
  /* [67][0][][] */ 12,-31,-45,-23,8,-88,57,-89,-9,33,14,118,-64,-30,-28,-127, 
  /* [68][0][][] */ 7,-127,-30,72,-13,0,26,88,36,35,52,6,-71,34,-11,-6, 
  /* [69][0][][] */ 18,86,95,-117,62,9,-25,102,44,105,59,102,113,-95,41,-127, 
  /* [70][0][][] */ 49,32,50,-39,100,10,-95,-56,-127,-90,-6,46,-29,65,-103,-6, 
  /* [71][0][][] */ -18,-70,26,-50,63,-16,38,24,-89,79,-127,-51,13,82,-13,52, 
  /* [72][0][][] */ 21,24,76,11,-67,-31,-118,-80,-8,79,-30,69,25,117,-127,-8, 
  /* [73][0][][] */ 0,-35,-15,-37,46,-112,29,-47,81,93,112,-10,25,-18,-76,127, 
  /* [74][0][][] */ 7,0,-27,87,-79,-7,90,28,81,65,28,113,127,26,-63,6, 
  /* [75][0][][] */ -29,47,-23,40,-48,127,-22,18,-32,33,-34,46,-23,50,26,-72, 
  /* [76][0][][] */ -77,100,-63,47,-124,-6,-3,30,50,43,-44,-48,51,-55,-127,46, 
  /* [77][0][][] */ 111,116,-127,123,74,76,77,57,40,6,113,-36,80,34,66,29, 
  /* [78][0][][] */ 10,-40,-3,-56,71,-121,28,-48,46,46,127,-24,6,-12,-45,122, 
  /* [79][0][][] */ -36,60,0,17,-6,-45,-31,-7,-127,-8,53,6,100,37,-72,-39, 
  /* [80][0][][] */ -87,22,73,3,75,57,3,-127,-78,54,-71,-51,-2,-89,25,68, 
  /* [81][0][][] */ 88,78,-24,1,33,-27,81,121,-109,127,-62,-37,-44,30,119,125, 
  /* [82][0][][] */ 45,113,-43,-84,-20,-45,124,-108,18,14,-66,66,127,-16,72,-43, 
  /* [83][0][][] */ 4,-32,21,22,5,24,-33,-98,62,-30,91,14,33,-67,-53,-127, 
  /* [84][0][][] */ -127,-86,-42,-14,-4,90,83,8,83,67,102,98,52,86,-74,13, 
  /* [85][0][][] */ 109,-4,91,-83,78,-6,-31,92,16,127,-66,11,-36,68,120,12, 
  /* [86][0][][] */ -73,73,-37,-6,27,82,24,14,85,35,127,-20,-27,57,-5,-17, 
  /* [87][0][][] */ 9,-61,27,-43,47,-127,25,-29,48,-9,65,-34,37,-40,-42,70, 
  /* [88][0][][] */ -88,63,36,-3,116,-24,38,25,-63,-80,114,-72,71,123,108,-127, 
  /* [89][0][][] */ -26,34,-16,25,-36,127,-15,36,-49,9,-38,23,-5,55,32,-84, 
  /* [90][0][][] */ 50,-78,24,19,127,-3,54,32,-11,-101,-124,-29,-18,-14,-57,34, 
  /* [91][0][][] */ -8,64,-17,-38,9,-85,-102,28,-71,30,-114,-127,-109,-77,-11,19, 
  /* [92][0][][] */ 60,39,55,29,-127,-80,22,13,-25,24,-24,-32,-23,-78,23,2, 
  /* [93][0][][] */ -12,-124,-124,68,-47,-52,-11,127,107,66,15,79,-71,72,-23,-26, 
  /* [94][0][][] */ 97,10,127,-24,26,-31,16,38,28,84,-7,53,11,5,121,-13, 
  /* [95][0][][] */ -65,-47,-23,-24,127,-3,42,83,-33,-13,-101,-51,17,14,-70,28, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.004047817550599575, 0.00188044598326087, 0.0059839850291609764, 0.0042028417810797691, 0.002811748068779707, 0.0012432627845555544, 0.0045469589531421661, 0.0025797286070883274, 0.001448093680664897, 0.0029766992665827274, 0.00099555659107863903, 0.0021022157743573189, 0.0025200420059263706, 0.007237686775624752, 0.0022680310066789389, 0.0027772116009145975, 0.0030488180927932262, 0.0024367452133446932, 0.0027235134039074183, 0.0017061290564015508, 0.0040819444693624973, 0.0015924235340207815, 0.0029925676062703133, 0.0026964587159454823, 0.0014437896898016334, 0.0032780654728412628, 0.0032954337075352669, 0.003551132045686245, 0.0020213695243000984, 0.0036864692810922861, 0.003298167372122407, 0.0023447778075933456, 0.0043104984797537327, 0.0013442125637084246, 0.0027237166650593281, 0.0029246325138956308, 0.002888950053602457, 0.0039854808710515499, 0.001989762531593442, 0.0028730782214552164, 0.001072188257239759, 0.0031445443164557219, 0.0027046771720051765, 0.0020391179714351892, 0.002114584669470787, 0.0021248734556138515, 0.0019622417166829109, 0.0018402079585939646, 0.0043104854412376881, 0.0034573038574308157, 0.0038374965079128742, 0.0022865920327603817, 0.0032282860483974218, 0.0021220336202532053, 0.0016745690954849124, 0.005591285414993763, 0.0024966916535049677, 0.001059852889738977, 0.0030536029953509569, 0.0024597605224698782, 0.0029797779861837626, 0.0012690017465502024, 0.0027697419282048941, 0.0040821796283125877, 0.0011965662706643343, 0.0012860497226938605, 0.00376508804038167, 0.0031779236160218716, 0.0020103482529520988, 0.0019670964684337378, 0.0048937834799289703, 0.0026492094621062279, 0.0026847433764487505, 0.0025638907682150602, 0.0034628491848707199, 0.0034791268408298492, 0.0036774566397070885, 0.0014828976709395647, 0.0026897578500211239, 0.0029261203017085791, 0.0023010675795376301, 0.002342174993827939, 0.0017029523150995374, 0.001246037776581943, 0.0024772325996309519, 0.0014971843920648098, 0.0024264496751129627, 0.0038599916733801365, 0.0037074494175612926, 0.0035848591942340136, 0.0028491036500781775, 0.0012986165238544345, 0.0026885673869401217, 0.0019401444587856531, 0.0019194857450202107, 0.0021769432350993156, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -6379, 14413, -27509, 1457, 16948, -20926, -57543, -12750, -5655, 9245, -22510, -17789, 9415, -17154, -4280, -4938, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00010281499271513894, 0.00010047141404356807, 9.7652613476384431e-05, 9.0689238277263939e-05, 7.9803190601523966e-05, 0.00011292224371572956, 6.9540728873107582e-05, 0.00011984273442067206, 8.2519058196339756e-05, 7.3815674113575369e-05, 0.00012378016253933311, 0.00013676006346940994, 7.9091041698120534e-05, 6.0885722632519901e-05, 0.00010704492160584778, 0.00010500707139726728, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,37,22,-37,72,70,-39,56,-12,113,1,43,-34,40,-13,48,31,80,47,-66,-71,79,-5,54,58,46,36,55,-49,-53,-11,89,-26,8,-71,55,48,-127,-35,14,16,-30,65,-4,-6,-54,-65,-20, 
  /* [1][0][][] */ -50,4,-80,-41,9,87,-57,20,-13,-32,-42,34,56,-18,-29,-27,-26,-30,-5,21,-64,43,-104,-47,-51,-38,49,67,-22,-27,42,-43,11,-57,-36,51,14,-58,127,-36,-24,27,-45,-17,31,49,32,21, 
  /* [2][0][][] */ 5,6,57,-32,-22,-85,15,27,100,82,-64,17,113,-53,127,87,-69,-26,-32,35,85,-84,-37,-102,15,-40,40,-74,40,48,-43,12,34,-25,59,43,-65,8,0,-32,29,28,68,-20,19,-91,100,-55, 
  /* [3][0][][] */ 36,6,-26,-25,31,108,16,-16,44,-46,26,-21,-54,10,7,39,-41,-64,33,-122,-7,-4,-25,-15,-43,92,127,64,-9,-39,30,39,57,-27,96,31,-47,-54,4,42,23,16,-19,-2,24,17,-6,-19, 
  /* [4][0][][] */ 94,-9,5,-51,91,88,49,10,64,-19,-103,27,42,-17,18,-20,-101,-118,-22,-96,-18,21,-37,-29,-84,127,-100,122,-57,-57,28,80,39,-53,20,-30,-12,15,-23,32,-50,-9,-3,48,-45,106,-28,-55, 
  /* [5][0][][] */ 2,-4,-57,5,-16,57,18,-26,65,51,38,88,51,-23,32,-3,-39,127,-19,36,8,1,-64,-13,36,-1,-63,-37,-13,28,18,-17,-37,4,40,17,-44,7,-86,5,90,-21,26,48,-17,7,-39,34, 
  /* [6][0][][] */ 61,11,17,69,9,-25,106,-56,-2,71,127,109,44,44,-51,61,38,-46,-76,89,52,-63,-47,62,-83,94,88,-6,115,53,-32,0,99,-67,-121,-4,104,32,4,4,16,64,61,-33,69,124,34,-5, 
  /* [7][0][][] */ -95,-2,-23,25,-57,-53,20,51,77,110,-53,-71,-98,12,-18,-17,-76,100,1,118,-47,41,26,41,-18,-93,-29,-77,33,39,-6,6,-15,15,17,-16,1,-55,127,14,3,44,22,-16,54,66,-26,2, 
  /* [8][0][][] */ -11,-92,47,-64,60,-54,72,-39,-23,-116,25,6,-36,7,33,28,-6,5,-40,95,6,33,-17,31,61,-13,-63,-35,-127,-26,-56,-107,6,-66,6,81,-11,31,105,17,19,0,64,118,-6,-63,-46,73, 
  /* [9][0][][] */ 22,-32,20,-61,40,80,-40,51,15,-32,-32,-14,22,-48,106,-18,10,-115,37,44,-70,40,52,-40,-21,-79,-22,79,58,75,-38,-29,-50,34,-10,127,-24,-45,-53,-25,-29,-3,39,100,55,77,-62,18, 
  /* [10][0][][] */ -14,21,-25,-6,17,26,-66,-40,47,41,64,-4,-34,-12,46,-51,-57,127,-3,51,-1,-12,16,26,-43,43,7,90,35,9,-32,-12,68,11,-10,24,-6,-48,-36,20,-81,-4,25,-17,15,41,33,35, 
  /* [11][0][][] */ -27,48,-16,33,31,55,1,9,19,14,-127,-73,67,22,-6,-45,-5,26,-40,-47,-11,-6,107,7,49,10,-15,33,-5,22,-10,50,31,-4,-46,3,38,78,98,22,33,-28,61,-3,-51,-19,82,4, 
  /* [12][0][][] */ -62,-1,35,20,-61,-59,4,2,-35,-36,-127,14,72,-96,20,35,48,103,82,-122,-34,45,-41,-82,-3,-19,33,-32,7,14,-19,75,68,79,36,-34,-55,-27,29,-2,-31,14,59,-2,37,-13,-40,-37, 
  /* [13][0][][] */ -57,-116,-46,-103,14,28,57,13,-127,31,123,-60,61,40,125,4,122,25,-5,-94,78,-82,117,-2,-83,8,-28,16,-39,-96,-114,14,45,-29,-79,65,36,-58,84,-79,-10,55,76,41,57,-33,109,-64, 
  /* [14][0][][] */ 66,19,-56,6,-43,18,-84,-25,-32,61,56,48,-10,-64,13,-46,53,-114,22,8,89,-61,22,-7,-12,127,-91,2,-59,-26,-91,1,124,44,88,-23,-81,14,-22,56,-16,-46,106,-24,-56,-43,-57,53, 
  /* [15][0][][] */ -64,17,39,24,95,2,-1,37,20,84,-15,60,57,-19,-40,-16,16,40,-2,-36,25,-38,-54,-59,57,-65,-36,64,-36,10,18,5,-59,3,127,-7,-87,13,58,-16,-47,-22,21,-6,-37,-37,-8,12, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0060555478557944298, 0.005917517002671957, 0.005751496646553278, 0.0053413710556924343, 0.0047002099454402924, 0.0066508399322628975, 0.0040957764722406864, 0.007058439776301384, 0.0048601678572595119, 0.0043475599959492683, 0.0072903446853160858, 0.0080548282712697983, 0.0046582659706473351, 0.0035860179923474789, 0.0063046803697943687, 0.006184656172990799, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 17187, -1148, 22556, -257, 18510, -2677, 44188, 308, 13741, 40752, 2495, 29493, 2980, 16716, 44304, 28578, 925, -3334, 3455, 58720, -411, 24233, 756, 19785, 21804, 38230, -2353, -1854, -4304, 17704, 25981, -12, -672, -869, 1694, 21274, 12608, 31910, 2664, 22015, 33992, 2239, 959, 18743, 987, 2481, 47303, 30251, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.0585716457571834e-05, 9.383391443407163e-05, 5.7338689657626674e-05, 0.00010523840319365263, 8.2994709373451769e-05, 7.3322065873071551e-05, 4.3778483814094216e-05, 0.00021419778931885958, 7.763668691040948e-05, 5.3009058319730684e-05, 5.9371930547058582e-05, 7.2759903559926897e-05, 5.2764989959541708e-05, 6.6253240220248699e-05, 3.7120000342838466e-05, 7.1865782956592739e-05, 6.5947046095971018e-05, 6.5010397520381957e-05, 0.00011771645949920639, 3.709158772835508e-05, 6.1954597185831517e-05, 5.0815495342249051e-05, 8.46732800710015e-05, 7.6372904004529119e-05, 5.5226111726369709e-05, 6.9860041548963636e-05, 5.939578841207549e-05, 3.899731018464081e-05, 0.00017337001918349415, 7.7323697041720152e-05, 6.7952052631881088e-05, 0.00025185520644299686, 0.00011411695595597848, 0.00014966297021601349, 7.2767790697980672e-05, 5.9951275034109131e-05, 7.1166185080073774e-05, 6.0288934037089348e-05, 7.4706840678118169e-05, 8.6747262685094029e-05, 4.4685002649202943e-05, 0.00011985973105765879, 0.00021490325161721557, 5.5623710068175569e-05, 0.00011109869228675961, 5.0000842747977003e-05, 4.5296630560187623e-05, 4.9712241889210418e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -94,73,-127,96,-97,71,-53,91,-86,-63,61,-52,61,-82,-45,-50,80,69,86,-111,84,-120,82,-87,-93,-64,61,123,-97,-45,-97,84,79,-92,59,-113,-81,-118,82,-54,-18,-95,118,-86,94,54,-71,-66, -116,103,-71,116,-80,125,-52,102,-127,-92,92,-77,90,-111,-70,-73,105,103,127,-127,111,-127,102,-127,-107,-97,82,127,36,-70,-114,113,105,-127,89,-124,-98,-127,107,-76,-114,95,127,-108,-39,96,-89,-97, -56,57,-7,31,-13,66,-27,35,-57,-31,40,-32,39,-38,-28,-18,43,44,62,-43,34,-59,40,-42,-81,-39,28,30,101,-24,-64,44,38,-80,37,-37,-24,-43,40,-46,-127,-43,44,-37,-72,57,-22,-64, 
  /* [0][1][][] */ -101,85,-62,109,-70,113,-112,105,-98,-98,77,-84,85,-103,-80,-98,97,87,-50,-97,103,-119,99,-78,-110,-88,93,98,-127,-96,-102,87,101,39,91,-116,-102,-102,102,-82,-113,-108,105,-111,127,64,-108,-95, -127,127,-101,127,-127,127,-127,127,-126,-127,127,-127,127,-127,-127,-127,127,127,-58,-111,127,-125,127,-118,-127,-127,127,112,25,-127,-127,127,127,48,127,-127,-127,-104,127,-127,-124,127,114,-127,-56,127,-127,-127, -74,69,-83,36,-55,27,-54,49,-49,-40,53,-56,58,-47,-51,-21,67,53,-46,-30,37,-61,44,-47,-117,-47,48,43,117,-69,-72,69,42,19,53,-42,-42,-19,57,-66,-53,-67,36,-56,-86,71,-28,-72, 
  /* [0][2][][] */ -44,47,4,45,-29,44,-63,32,-48,-44,21,-44,33,-48,-31,-56,54,37,-67,-16,20,-31,38,-36,-45,-38,42,-6,-76,-56,-29,34,33,55,46,-60,-51,-43,25,-36,-104,-54,32,-72,68,23,-67,-43, -73,68,-71,59,-63,29,-73,32,-58,-51,42,-62,52,-63,-53,-54,75,52,-86,-12,25,-31,38,-52,-58,-55,55,25,9,-81,-56,43,39,77,62,-61,-64,-39,32,-52,-52,62,32,-112,-30,52,-74,-57, -29,39,-66,11,-37,-13,-36,8,-13,-16,20,-26,23,-19,-21,2,44,21,-63,6,8,2,8,-12,-35,-16,30,11,70,-31,-14,18,7,48,27,-11,-9,1,13,-24,16,-25,4,-32,-50,38,-22,-37, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0037654554471373558, 0.0050056502223014832, 0.0030587813816964626, 0.0056140325032174587, 0.0044274237006902695, 0.0039114281535148621, 0.002335400553420186, 0.011426564306020737, 0.0041415952146053314, 0.002827813383191824, 0.0031672462355345488, 0.0038814391009509563, 0.0028147934935986996, 0.0035343356430530548, 0.0019801980815827847, 0.0038337416481226683, 0.0035180016420781612, 0.0034680352546274662, 0.0062796850688755512, 0.001978682354092598, 0.0033050209749490023, 0.0027107959613204002, 0.0045169685035943985, 0.0040741777047514915, 0.0029460841324180365, 0.0037267436273396015, 0.0031685191206634045, 0.0020803448278456926, 0.0092485714703798294, 0.0041248984634876251, 0.0036249603144824505, 0.013435431756079197, 0.0060876663774251938, 0.0079838987439870834, 0.0038818600587546825, 0.0031981519423425198, 0.0037964207585901022, 0.0032161646522581577, 0.0039853001944720745, 0.0046276068314909935, 0.0023837597109377384, 0.0063940198160707951, 0.011464197188615799, 0.002967294305562973, 0.0059266546741127968, 0.0026673376560211182, 0.0024163874331861734, 0.0026519419625401497, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2954, -1732, 1231, -2547, 5429, -1166, 6145, -4881, 1728, 980, 2555, 5576, 603, -521, 770, 6891, -2423, 4816, 7029, 1311, -872, 2858, -1094, 6779, 3154, 2782, 1598, -1214, 9325, -502, 3196, -3011, -1270, 5042, -1516, 3042, 2542, 1267, 503, 5609, 2904, 12113, -5256, 2295, 10426, 60, 3274, 3542, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00014347999240271747, 0.00019910161790903658, 0.00019107109983451664, 0.00017811148427426815, 0.00014138195547275245, 0.00014475923671852797, 0.00012085714843124151, 0.00010978482168866321, 0.00018581590848043561, 0.00019794258696492761, 0.00016012201376724988, 0.00013607821892946959, 0.00022132473532110453, 0.00021889126219321042, 0.00019113754387944937, 0.00011556468962226063, 0.00017750982078723609, 0.00016055999731179327, 0.00012345275899861008, 0.00019092053116764873, 0.00024136730644386262, 0.00018698895291890949, 0.00015110679669305682, 0.00012086467177141458, 0.00014803081285208464, 0.00014763513172511011, 0.00019597425125539303, 0.00018828187603503466, 9.7144278697669506e-05, 0.00019909886759705842, 0.00014273771375883371, 0.00011769669799832627, 0.00013303397281561047, 0.00015643995720893145, 0.0001559503871249035, 0.00017855744226835668, 0.00016482394130434841, 0.00017795775784179568, 0.00014831429871264845, 0.00013999237853568047, 0.0001839705219026655, 7.3528870416339487e-05, 0.00010354757978348061, 0.00018075703701470047, 8.1037738709710538e-05, 0.00017349810514133424, 0.00017372169531881809, 0.0001686665927991271, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 74,32,127,-38,67,103,-77,-56, 
  /* [1][0][][] */ 10,-83,-127,5,50,23,32,2, 
  /* [2][0][][] */ -127,-7,-46,-24,60,23,-75,-42, 
  /* [3][0][][] */ 41,72,127,-78,-10,-110,-8,-15, 
  /* [4][0][][] */ -127,24,-50,-22,47,9,-43,-55, 
  /* [5][0][][] */ -96,21,-51,-8,12,38,-77,-127, 
  /* [6][0][][] */ -37,-127,-121,44,101,9,5,47, 
  /* [7][0][][] */ -58,-127,-96,-75,-68,-64,17,84, 
  /* [8][0][][] */ 85,33,-5,-1,91,-73,-127,14, 
  /* [9][0][][] */ -39,54,-51,91,-62,-38,127,-29, 
  /* [10][0][][] */ -24,127,37,62,121,-24,-12,54, 
  /* [11][0][][] */ -76,-35,-20,-7,-81,104,127,-1, 
  /* [12][0][][] */ 68,31,-127,33,-7,-36,-63,-16, 
  /* [13][0][][] */ 59,-27,-65,12,16,-127,-30,-20, 
  /* [14][0][][] */ 6,-77,76,13,127,-109,-63,21, 
  /* [15][0][][] */ -39,-45,-4,127,67,80,-77,24, 
  /* [16][0][][] */ 113,27,-37,15,72,-103,-127,-25, 
  /* [17][0][][] */ 60,127,52,74,45,63,26,-89, 
  /* [18][0][][] */ 37,-10,4,-3,127,0,23,-9, 
  /* [19][0][][] */ 14,127,34,13,-116,16,23,-33, 
  /* [20][0][][] */ -44,20,63,-127,22,31,-15,103, 
  /* [21][0][][] */ -33,74,37,-127,28,41,-13,110, 
  /* [22][0][][] */ -69,-71,-101,20,-127,123,112,-22, 
  /* [23][0][][] */ 95,33,-127,17,17,-50,-67,-20, 
  /* [24][0][][] */ -49,41,11,6,-17,74,-127,101, 
  /* [25][0][][] */ -94,-56,-127,10,-51,-69,66,92, 
  /* [26][0][][] */ 48,-7,-36,-32,109,-17,127,-39, 
  /* [27][0][][] */ 127,-72,26,91,4,28,-17,91, 
  /* [28][0][][] */ 46,55,55,-13,127,-59,55,-31, 
  /* [29][0][][] */ -15,-8,-23,-48,-72,15,127,-33, 
  /* [30][0][][] */ 41,-127,-55,-73,-105,-5,7,-50, 
  /* [31][0][][] */ 12,27,-9,-11,-127,5,-27,-12, 
  /* [32][0][][] */ 44,-62,-58,80,-5,-94,121,-127, 
  /* [33][0][][] */ 47,127,50,33,51,-19,-21,-25, 
  /* [34][0][][] */ -123,-37,127,-6,-20,100,100,9, 
  /* [35][0][][] */ -31,77,127,-11,-65,-69,-37,27, 
  /* [36][0][][] */ -100,9,103,-21,-14,127,79,26, 
  /* [37][0][][] */ -16,-85,-11,-127,-40,-81,68,47, 
  /* [38][0][][] */ 46,-16,91,-57,57,60,-127,11, 
  /* [39][0][][] */ -11,86,-127,-42,-18,-1,4,81, 
  /* [40][0][][] */ 65,-55,19,30,14,-2,5,127, 
  /* [41][0][][] */ -26,83,127,-4,7,83,-66,24, 
  /* [42][0][][] */ 61,-127,-115,-24,-112,3,12,-89, 
  /* [43][0][][] */ -6,-87,28,-72,127,-48,19,36, 
  /* [44][0][][] */ 4,123,127,21,9,61,-71,4, 
  /* [45][0][][] */ -34,44,14,85,-112,63,-127,22, 
  /* [46][0][][] */ -48,-35,60,50,-127,-116,-30,-3, 
  /* [47][0][][] */ -16,56,44,-104,-127,37,-17,62, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023076212964951992, 0.0032021966762840748, 0.0030730399303138256, 0.002864607609808445, 0.0022738780826330185, 0.0023281958419829607, 0.0019437730079516768, 0.0017656942363828421, 0.0029885196126997471, 0.0031835557892918587, 0.0025752787478268147, 0.0021885770838707685, 0.0035596161615103483, 0.0035204780288040638, 0.0030741086229681969, 0.0018586532678455114, 0.0028549309354275465, 0.0025823230389505625, 0.0019855187274515629, 0.0030706184916198254, 0.0038819652982056141, 0.0030073858797550201, 0.0024302850943058729, 0.0019438940798863769, 0.0023808132391422987, 0.0023744495119899511, 0.003151898505166173, 0.0030281802173703909, 0.0015623935032635927, 0.0032021524384617805, 0.0022956831380724907, 0.001892942818813026, 0.0021396155934780836, 0.0025160594377666712, 0.0025081855710595846, 0.0028717799577862024, 0.0026509009767323732, 0.0028621351812034845, 0.0023853725288063288, 0.0022515293676406145, 0.0029588397592306137, 0.0011825815308839083, 0.0016653792699798942, 0.002907156478613615, 0.0013033484574407339, 0.0027904096059501171, 0.0027940056752413511, 0.0027127033099532127, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 2771, 714, 23076, -4608, 5390, -15309, 2447, -14980, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.768287418410182e-05, 0.00011402810196159407, 0.00015606881061103195, 0.0001099863147828728, 0.00012816011440008879, 0.00012375862570479512, 8.2854261563625187e-05, 8.2487138570286334e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -39,-50,-22,-60,4,-10,85,84,-98,-82,-38,8,-52,-1,-56,36,-78,12,11,127,55,-29,14,91,68,75,23,5,-91,-56,-74,-52,-52,93,31,-51,29,-28,86,-10,25,9,3,-102,40,-34,-35,-79, 
  /* [1][0][][] */ -17,52,-23,-27,-74,61,-22,-52,-35,72,-21,18,56,47,-52,-7,-22,-121,76,-52,127,8,-63,27,56,-4,-86,63,37,-15,66,35,-31,-20,2,-14,1,107,-16,-27,66,41,-6,11,104,15,-33,55, 
  /* [2][0][][] */ -26,-34,110,1,81,-41,-13,19,-31,-1,-12,45,7,-40,-48,-127,-53,-94,-23,13,-95,21,-38,-31,-48,16,-3,-45,-39,5,-33,-12,-1,-4,26,-7,25,-29,-48,7,33,-34,31,-48,-43,-45,-60,-48, 
  /* [3][0][][] */ 51,18,63,11,20,-34,31,68,-51,-27,40,-27,-67,53,-19,50,66,33,-36,28,-108,-69,127,-2,3,1,-60,-32,-47,62,112,-61,5,-109,-25,41,-13,-77,-12,68,-74,-56,62,-3,-96,-69,57,-10, 
  /* [4][0][][] */ 15,-19,68,-27,2,-8,-5,-6,-59,-8,-23,9,43,-68,39,-98,40,45,-9,-35,9,33,16,8,-2,3,55,-18,23,21,-127,-12,-26,-22,7,15,48,-4,34,2,-38,-12,-66,25,-14,-97,-1,17, 
  /* [5][0][][] */ 27,-46,64,28,29,17,27,0,-74,-11,-46,27,31,5,11,-47,93,74,-2,-18,89,-58,127,-88,-18,43,5,49,13,12,-34,-50,-16,-44,-37,11,41,29,71,5,-76,27,31,28,49,-16,81,-4, 
  /* [6][0][][] */ -43,57,-127,85,53,24,42,18,-20,-6,66,-77,-98,-22,-33,33,-122,34,-6,91,21,49,-92,-91,-5,-21,29,74,-30,-38,-48,7,41,76,-45,-23,-18,-4,81,7,73,63,-119,-57,-37,117,-55,-34, 
  /* [7][0][][] */ 40,76,-81,18,12,65,127,75,45,75,-97,0,-45,6,-68,-51,32,36,118,109,81,6,125,24,105,100,-48,95,-71,38,-5,-80,23,-67,-20,21,3,97,-61,83,-63,51,-9,-86,85,-22,53,-36, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0041515221819281578, 0.0048461942933499813, 0.0066329245455563068, 0.0046744183637201786, 0.0054468046873807907, 0.0052597415633499622, 0.003521305974572897, 0.0035057032946497202, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 173, 10224, -411, -70, 507, -1304, 2188, -576, -4559, 245, -7636, -162, -347, -725, -2313, 4434, 7962, 3564, 284, -3929, -7446, 987, 18861, -5426, -877, -1403, 5190, -7246, -335, -701, -9701, 9341, 5185, -158, 4006, 72, -32, -386, 10677, 750, 5691, -3018, 2397, 5914, -1412, 9696, -836, 807, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00029914066544733942, 0.0001628603640710935, 0.00064470060169696808, 0.00022063555661588907, 0.00023801469069439918, 0.00029172864742577076, 0.00020963804854545742, 0.00029362237546592951, 9.2100490292068571e-05, 0.00027185020735487342, 0.00019219670502934605, 0.0012850466882809997, 0.00040653362520970404, 0.00066808902192860842, 0.00040766125312075019, 0.00062062870711088181, 0.00015001592691987753, 5.6077216868288815e-05, 0.00019548072305042297, 0.00028707340243272483, 0.00023974728537723422, 0.00023950681497808546, 8.0480742326471955e-05, 0.00044132367474958301, 0.00017681934696156532, 0.00033871849882416427, 0.00046550191473215818, 0.00017792635480873287, 0.00018312702013645321, 0.00044554035412147641, 0.00010894712613662705, 0.00012093281111447141, 0.00013823028712067753, 0.00018653177539817989, 0.00013315159594640136, 0.00029079447267577052, 0.0020071931648999453, 0.000300844811135903, 0.00013527458941098303, 0.00016946450341492891, 0.00016526316176168621, 0.00012900806905236095, 0.00029876964981667697, 0.00019006173533853143, 0.00033426866866648197, 8.1401340139564127e-05, 6.2753417296335101e-05, 0.00018825988809112459, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 7,-34,9,4,-16,-92,-47,57,-38,-1,-5,9,47,-7,-15,4,96,13,23,0,-1,-28,-74,18,-9,-12,-3,-23,-61,75,-9,-106,51,-6,-51,-57,-8,-33,7,-21,-14,34,15,8,-11,64,127,-26, -127,-84,-23,127,-64,70,-100,127,28,18,14,-3,52,19,-5,-43,-30,60,25,4,6,127,9,127,127,-27,-44,40,73,-118,-5,-67,69,-2,-37,-127,26,10,-56,-56,-127,-6,-92,-127,35,53,52,115, -14,-2,11,6,-23,30,39,44,8,-37,2,5,-20,-1,-3,5,-61,34,-67,-31,-7,-34,127,20,-62,4,10,-5,18,40,14,16,0,-15,-34,72,8,3,17,71,29,-23,33,-38,-7,34,-26,-19, 
  /* [0][1][][] */ -12,-22,-28,-4,32,-107,127,-81,-14,7,25,37,127,14,2,-31,-21,-35,25,41,63,-72,41,14,-71,127,-74,-18,127,-90,49,-127,-45,4,-83,17,13,-64,-41,6,125,127,15,-126,-60,-57,-4,82, 93,-127,127,-2,127,71,-68,-55,29,127,127,-127,-92,127,127,127,127,127,112,127,127,120,1,6,118,-96,-127,127,40,127,127,-4,-127,127,127,122,-127,127,-127,-127,44,40,-127,-35,127,-127,-10,81, 21,28,-40,-7,-48,127,-115,89,114,-78,18,65,-38,11,13,-62,14,9,-127,18,21,-122,-37,-2,70,-11,-20,117,-78,-33,32,-39,-26,15,97,-28,40,-6,-1,-95,116,3,38,52,-52,96,100,-87, 
  /* [0][2][][] */ -4,23,6,-34,1,-62,-13,-8,3,-1,7,5,-13,-16,-3,-1,-46,12,6,-41,-2,-27,85,-12,-119,5,41,-23,7,3,2,37,-12,-8,-70,36,0,-15,17,47,-27,3,15,12,-15,21,-13,9, 35,-20,-35,-39,28,39,121,-105,127,-36,2,9,-69,-24,-24,-71,-15,111,2,23,10,31,-22,-34,-86,60,78,-5,-102,16,-31,-3,-21,0,-37,5,56,-26,0,118,-119,1,-7,66,36,57,9,-127, -10,28,4,-23,-13,-2,-3,-55,-23,-24,-3,8,18,-14,-13,14,44,41,-32,-19,-6,-26,-47,-16,17,-21,26,-17,-22,5,-6,23,30,-13,-26,-53,-6,5,31,8,-9,-11,12,19,-12,17,64,-56, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013936331495642662, 0.0075873197056353092, 0.030035238713026047, 0.010278943926095963, 0.011088601313531399, 0.013591021299362183, 0.0097665935754776001, 0.013679245486855507, 0.0042907670140266418, 0.012664926238358021, 0.0089540379121899605, 0.059867605566978455, 0.018939541652798653, 0.03112485446035862, 0.018992075696587563, 0.028913779184222221, 0.0069889244623482227, 0.0026125188451260328, 0.0091070337221026421, 0.013374143280088902, 0.011169319041073322, 0.011158116161823273, 0.0037494276184588671, 0.020560337230563164, 0.0082376394420862198, 0.01578017883002758, 0.021686749532818794, 0.0082892123609781265, 0.0085315005853772163, 0.020756782963871956, 0.0050756162963807583, 0.005634003784507513, 0.0064398567192256451, 0.0086901206523180008, 0.0062032514251768589, 0.013547499664127827, 0.093510881066322327, 0.014015723951160908, 0.0063021569512784481, 0.0078949928283691406, 0.0076992614194750786, 0.0060102129355072975, 0.013919046148657799, 0.0088545745238661766, 0.015572870150208473, 0.0037923161871731281, 0.0029235489200800657, 0.0087706297636032104, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 4205, 5386, 16524, 2280, 3313, -2275, 6943, 16873, 4929, -1122, 4939, -3091, 21122, -2511, 2730, 25102, -482, 2905, 246, 3777, 5140, 5777, 719, 45566, 9958, 4499, 21432, 2361, 6777, 8376, 813, 1483, 1117, 2271, -455, 442, -3734, -797, 3558, 3659, 6857, 3514, 5377, 6647, 6936, 3918, 2392, 9939, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00014771403220947832, 0.00015119623276405036, 5.7647095673019066e-05, 0.00012822401185985655, 0.00014921661932021379, 0.00017372837464790791, 0.0001156942016677931, 5.6314060202566907e-05, 0.00011384180106688291, 0.00016736563702579588, 0.0001671081263339147, 0.00015418477414641529, 4.564541086438112e-05, 0.00017173631931655109, 0.00017248898802790791, 4.2632971599232405e-05, 0.0002313757868250832, 0.00014306789671536535, 0.00019608720322139561, 0.0001638295070733875, 0.00013800933083985001, 0.00013110165309626609, 0.00024812825722619891, 2.4548924557166174e-05, 8.6406638729386032e-05, 0.00012528918159659952, 4.7780195018276572e-05, 0.00017378990014549345, 0.00011639660806395113, 8.990828791866079e-05, 0.00032265365007333457, 0.00028654810739681125, 0.0001744839537423104, 0.00017256442515645176, 0.00018983938207384199, 0.00019951918511651456, 0.0001555196795379743, 0.00019145441183354706, 0.00016453592979814857, 0.0001448506664019078, 0.00011462301335996017, 0.00014744016516488045, 0.00014702441694680601, 0.00012261375377420336, 0.00010436362936161458, 0.0001756095007294789, 0.00026424959651194513, 8.3890437963418663e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 65,127,-76,-85,15,83,14,74, 
  /* [1][0][][] */ 56,-75,50,-127,-61,77,-85,-48, 
  /* [2][0][][] */ -32,127,117,51,105,6,50,5, 
  /* [3][0][][] */ 108,45,-89,67,-2,-103,-127,-34, 
  /* [4][0][][] */ -45,33,17,-68,-31,111,127,53, 
  /* [5][0][][] */ 26,72,-127,-77,47,81,27,-29, 
  /* [6][0][][] */ -15,127,60,52,82,10,14,-94, 
  /* [7][0][][] */ 127,-25,-35,29,18,-1,103,13, 
  /* [8][0][][] */ 56,127,66,94,119,81,99,-81, 
  /* [9][0][][] */ 45,110,-127,-83,8,92,3,64, 
  /* [10][0][][] */ -71,-45,20,-52,-7,-27,-49,127, 
  /* [11][0][][] */ 14,-111,-127,-17,21,-10,41,-10, 
  /* [12][0][][] */ -28,-101,-125,-27,-127,34,-68,49, 
  /* [13][0][][] */ -6,7,-105,101,-127,-28,-1,-17, 
  /* [14][0][][] */ -63,-46,-127,-9,37,-4,-11,-57, 
  /* [15][0][][] */ 17,-103,-127,19,-102,-23,-25,-17, 
  /* [16][0][][] */ 127,-67,-17,67,-78,21,29,99, 
  /* [17][0][][] */ -22,116,127,-24,-46,-14,-31,-18, 
  /* [18][0][][] */ 11,-127,42,68,-1,-67,45,-78, 
  /* [19][0][][] */ 127,-43,-59,34,-96,5,38,103, 
  /* [20][0][][] */ -26,-127,78,73,-13,-89,-2,-71, 
  /* [21][0][][] */ -7,-54,-15,-39,127,-5,49,18, 
  /* [22][0][][] */ -127,31,-80,51,53,52,-99,-109, 
  /* [23][0][][] */ -89,-47,61,0,-111,127,118,-53, 
  /* [24][0][][] */ -32,59,-10,-49,-49,123,127,4, 
  /* [25][0][][] */ -49,-105,-127,-63,-49,-13,-25,-40, 
  /* [26][0][][] */ -10,66,-12,127,-88,33,-56,-2, 
  /* [27][0][][] */ 20,-127,30,77,18,-57,3,-119, 
  /* [28][0][][] */ 22,127,57,47,111,-21,22,-61, 
  /* [29][0][][] */ 114,30,-36,-6,88,-127,-107,38, 
  /* [30][0][][] */ 28,-5,36,-127,22,-20,19,-27, 
  /* [31][0][][] */ 45,-42,4,61,-10,28,14,127, 
  /* [32][0][][] */ -87,-68,15,-64,-69,127,67,82, 
  /* [33][0][][] */ -35,43,45,-41,33,127,-107,74, 
  /* [34][0][][] */ 26,127,-68,-49,17,49,-63,62, 
  /* [35][0][][] */ 12,-127,31,59,-21,-65,38,-74, 
  /* [36][0][][] */ -17,-30,-77,-9,-127,-56,-15,9, 
  /* [37][0][][] */ -48,-127,71,85,-43,-92,-14,-46, 
  /* [38][0][][] */ -74,27,63,-67,-127,-83,-60,83, 
  /* [39][0][][] */ 70,-127,97,53,-7,-78,-22,-87, 
  /* [40][0][][] */ 2,59,23,47,-127,-15,-60,18, 
  /* [41][0][][] */ 113,127,-79,-111,58,18,-4,19, 
  /* [42][0][][] */ -12,-36,-16,11,127,11,44,22, 
  /* [43][0][][] */ 127,24,87,23,-71,-25,64,105, 
  /* [44][0][][] */ 73,40,-29,11,77,-118,-127,22, 
  /* [45][0][][] */ 52,14,22,21,84,-127,0,-48, 
  /* [46][0][][] */ 62,-38,-8,127,41,54,17,72, 
  /* [47][0][][] */ -89,-81,40,70,-57,22,127,-81, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0029437057673931122, 0.0030131004750728607, 0.0011488149175420403, 0.0025553007144480944, 0.0029736498836427927, 0.0034621302038431168, 0.0023056014906615019, 0.0011222496395930648, 0.0022686859592795372, 0.003335330868139863, 0.0033301990479230881, 0.0030726573895663023, 0.00090964045375585556, 0.0034224316477775574, 0.003437431063503027, 0.00084960728418081999, 0.0046109515242278576, 0.0028511155396699905, 0.0039077061228454113, 0.0032648614142090082, 0.0027503063902258873, 0.0026126473676413298, 0.0049448013305664062, 0.00048922101268544793, 0.0017219468718394637, 0.0024968141224235296, 0.00095218326896429062, 0.003463356290012598, 0.0023195992689579725, 0.0017917292425408959, 0.0064299739897251129, 0.0057104481384158134, 0.0034771875943988562, 0.0034389344509691, 0.003783196909353137, 0.0039761001244187355, 0.0030992599204182625, 0.003815382020547986, 0.0032789395190775394, 0.0028866434004157782, 0.0022842544130980968, 0.0029382479842752218, 0.0029299627058207989, 0.0024434970691800117, 0.0020798011682927608, 0.0034996180329471827, 0.0052660740911960602, 0.0016718029510229826, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7621, 15658, -4231, 7207, -920, 3546, -11400, -18255, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00023196364054456353, 0.00012179739132989198, 0.00014527114399243146, 0.00015912011440377682, 0.0001886733080027625, 0.00015404097212012857, 0.00018425831513013691, 0.00015667529078200459, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-2,32,10,-33,-15,11,10,-43,-7,-66,-58,-25,-66,-11,-32,47,-39,39,43,-17,34,-36,14,1,-39,54,-12,-6,-20,17,11,83,35,37,-127,18,-2,-16,-33,5,-16,44,48,35,5,27,1, 
  /* [1][0][][] */ 1,39,63,-28,-14,44,-51,-32,3,26,-15,-90,9,88,-16,57,-21,21,-26,-53,10,-79,-28,25,-75,-10,-3,-115,-28,-17,34,-55,49,77,-44,3,127,-32,0,50,-32,41,-83,-32,114,-17,-35,-27, 
  /* [2][0][][] */ -2,-21,-65,13,-5,46,25,2,-8,43,-2,29,64,-93,19,-63,34,-90,23,34,-25,52,-8,28,-19,63,-25,-73,16,5,20,-73,-49,-91,34,-31,108,21,-13,-58,-2,31,79,27,127,17,19,24, 
  /* [3][0][][] */ -7,23,-67,38,14,-38,-69,-98,10,-23,-33,-3,2,25,35,78,-7,13,-34,22,7,-96,31,-59,-71,-11,127,-12,-42,3,-64,18,3,-79,10,-16,-20,-38,-23,99,-46,-37,1,15,37,2,-38,39, 
  /* [4][0][][] */ -25,-45,-6,8,29,-28,-11,-6,28,-30,59,-79,4,29,7,11,-18,-23,10,-14,-3,-52,4,-19,18,-11,40,48,33,20,-15,27,-10,-1,1,-1,-69,83,34,-26,29,-19,-21,-24,-77,11,127,10, 
  /* [5][0][][] */ 43,-22,1,14,26,-42,33,-127,27,-27,-9,118,-77,67,23,-64,-1,-90,14,2,-34,63,-37,-48,-60,77,-23,1,-20,50,-41,-35,25,53,36,-4,-38,-7,-45,-42,15,-39,-45,-9,-32,54,89,18, 
  /* [6][0][][] */ 51,-23,19,-10,-35,-19,-36,19,-38,8,-39,127,-43,-36,-4,57,9,44,15,32,38,-83,-22,18,22,37,-64,4,10,-41,14,35,5,14,-16,-2,12,2,-3,-6,-10,-16,42,56,-4,-36,71,-15, 
  /* [7][0][][] */ -27,7,-6,63,34,30,6,30,22,3,68,-5,121,106,59,50,44,47,-15,2,21,-18,-86,-28,17,-5,-30,63,34,-28,-35,-16,37,7,40,-94,-76,40,41,57,-31,33,82,127,-62,-29,-107,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0098584545776247978, 0.0051763891242444515, 0.006174023263156414, 0.0067626046948134899, 0.0080186156556010246, 0.0065467413514852524, 0.0078309783712029457, 0.0066586998291313648, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 12469, 4907, 4458, -133, 319, -909, 125, 32681, -549, 1298, 6132, 55041, 2070, 4758, 140, 10968, -1116, 13097, 945, 8021, 11923, 530, 3629, -9369, 10846, 1339, 1016, 13132, 991, -762, -9361, 10685, 4698, 1756, -537, 5327, -8831, 12765, -1740, 16960, -1083, -1068, 5020, 1749, 490, -427, 1597, -269, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.9418219684157521e-05, 0.00010131615999853238, 0.00015395146328955889, 0.00014924402057658881, 0.00077981909271329641, 0.00015566821093671024, 0.00017752386338543147, 9.7328746051061898e-05, 0.00012713641626760364, 8.0999212514143437e-05, 7.3805131250992417e-05, 5.4440228268504143e-05, 8.3970517152920365e-05, 6.2498700572177768e-05, 0.00026247659116052091, 0.00017993178335018456, 0.00011212241224711761, 0.00035640859277918935, 0.00012488329957704991, 0.00014437343634199351, 9.1369976871646941e-05, 0.00040231124148704112, 0.00012114022683817893, 0.00023575055820401758, 0.00012371047341730446, 9.3384354840964079e-05, 6.4161875343415886e-05, 9.3959482910577208e-05, 0.00021694583119824529, 0.0008055148646235466, 0.00024231622228398919, 8.1028476415667683e-05, 9.4795243057888001e-05, 0.00013636046787723899, 0.00015888092457316816, 5.6209672038676217e-05, 9.6907489933073521e-05, 4.0795839595375583e-05, 0.00011902705591637641, 7.6431540946941823e-05, 0.00013181581743992865, 0.00014395196922123432, 7.1862865297589451e-05, 8.1220816355198622e-05, 8.1215934187639505e-05, 0.00033226615050807595, 6.9500609242822975e-05, 0.0002117336553055793, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -53,-97,-14,-18,127,-57,65,-62,-86,-82,-21,-39,119,35,64,-127,59,-24,1,-39,-83,104,-1,15,-19,80,57,-41,72,-73,15,-45,-101,-87,47,68,24,75,110,-63,-123,-15,33,75,50,-127,92,82, -60,-126,-80,52,-79,109,58,-66,-70,43,81,-99,127,89,103,-78,-86,-81,31,-58,-84,99,-63,119,-83,100,83,-127,85,-52,6,-119,-48,-85,77,122,114,109,127,-64,-127,-65,69,86,81,108,95,72, 6,-54,-69,92,-45,-28,19,-6,92,23,60,-66,17,55,-42,-5,-86,-18,29,-37,-23,6,-71,-2,-71,48,17,-94,28,54,120,-69,10,11,-10,50,80,64,51,2,-20,93,62,26,37,28,18,-116, 
  /* [0][1][][] */ -125,-95,-14,-76,-79,-74,104,-119,-127,-127,83,-72,93,46,-122,-78,127,-127,-63,-75,-89,124,-40,12,-17,99,104,-54,-104,-80,1,-52,-88,-127,-127,65,37,86,12,-89,58,-15,73,120,86,105,122,-127, -127,-127,-127,-105,-27,127,127,-127,93,69,127,-127,107,127,59,-117,56,-94,-127,-127,-127,127,-127,127,-127,127,127,-123,-127,127,-14,-127,-127,-107,51,127,127,127,-6,-127,98,-94,127,127,127,-3,127,104, -52,-66,-119,127,72,-47,50,-26,70,31,16,-59,9,62,69,-51,-19,0,-17,-67,-61,5,-76,-16,-111,49,28,-86,-56,37,127,-89,-58,8,63,77,82,72,-18,-33,45,127,76,17,52,-49,20,20, 
  /* [0][2][][] */ -102,-22,23,17,-40,-27,17,-43,26,-43,15,-31,1,17,-45,-20,-80,-20,92,-28,-15,48,-61,-11,-2,59,68,-16,32,57,-6,-6,2,-85,-43,37,10,13,-53,-36,15,-3,33,42,27,52,16,-69, -88,-39,-37,-76,91,40,56,-61,91,25,-44,-56,-4,40,-127,-80,39,7,48,-62,-45,35,-60,57,-60,63,69,-31,34,5,-26,-32,-68,-26,-65,57,28,19,-94,-67,22,-41,74,67,45,-106,25,-4, -23,-25,-52,-26,-23,-16,17,-22,-68,14,-19,-11,-10,10,29,-25,34,37,-1,-41,-38,-11,-20,-27,-56,7,17,-19,6,-64,49,-20,-91,16,22,48,18,22,-44,-30,3,46,21,17,16,-5,6,28, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033752741292119026, 0.0043059368617832661, 0.0065429373644292355, 0.0063428706489503384, 0.033142309635877609, 0.006615898571908474, 0.0075447643175721169, 0.0041364715434610844, 0.0054032974876463413, 0.0034424664918333292, 0.0031367179471999407, 0.0023137095849961042, 0.0035687468480318785, 0.0026561946142464876, 0.011155255138874054, 0.0076471003703773022, 0.0047652022913098335, 0.01514736469835043, 0.0053075402975082397, 0.0061358707025647163, 0.0038832239806652069, 0.017098227515816689, 0.0051484596915543079, 0.010019398294389248, 0.0052576949819922447, 0.0039688348770141602, 0.0027268796693533659, 0.0039932779036462307, 0.0092201977968215942, 0.034234382212162018, 0.010298439301550388, 0.0034437100403010845, 0.0040287976153194904, 0.0057953200303018093, 0.006752439308911562, 0.0023889110889285803, 0.0041185682639479637, 0.0017338230973109603, 0.0050586499273777008, 0.0032483404502272606, 0.0056021721102297306, 0.0061179585754871368, 0.0030541715677827597, 0.0034518847241997719, 0.0034516770392656326, 0.014121311716735363, 0.002953775692731142, 0.0089986799284815788, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1711, -628, -699, 1504, 19982, 2861, -762, 6285, 2091, 1731, 311, 4378, 1507, 857, -1402, 692, 4516, 15149, 4866, -998, 1533, -1940, -75, 2696, -342, -1033, 2289, -48, 4606, 20936, 2649, -52, 667, -134, 3416, 16, 603, -257, 1377, 1755, 2318, 3037, 305, -408, 1003, 3409, 1879, -290, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030442577553912997, 0.00028361353906802833, 0.00018417924002278596, 0.00025190840824507177, 4.9005633627530187e-05, 0.00021833645587321371, 0.0003460551961325109, 0.00014211851521395147, 0.00020742707420140505, 0.00038922103703953326, 0.00021712529996875674, 0.0002002891997108236, 0.00016181594401132315, 0.0002559172862675041, 0.00020681452588178217, 0.00021763549011666328, 0.00016366799536626786, 6.1934508266858757e-05, 0.000159885996254161, 0.00024366768775507808, 0.00029300531605258584, 0.00013249908806756139, 0.00033603605697862804, 0.00026986910961568356, 0.00037484150379896164, 0.00050260545685887337, 0.00022997592168394476, 0.00064661848591640592, 0.00017593565280549228, 4.6843855670886114e-05, 0.00027130995295010507, 0.00054440437816083431, 0.00026706402422860265, 0.00027292410959489644, 0.00021259606000967324, 0.0002367164270253852, 0.00031387689523398876, 0.00046253876644186676, 0.00029991436167620122, 0.00033787364372983575, 0.0002396352356299758, 0.00021425275190267712, 0.00022928204271011055, 0.00034246043651364744, 0.00029319859459064901, 0.00015318836085498333, 0.00019390469242352992, 0.00024371907056774944, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -43,30,5,-15,-81,-37,-127,35, 
  /* [1][0][][] */ 86,-75,-55,-54,127,-83,98,23, 
  /* [2][0][][] */ -107,127,-49,-126,50,-21,-30,43, 
  /* [3][0][][] */ 50,22,89,9,96,115,127,-15, 
  /* [4][0][][] */ -72,-127,66,7,-58,-118,8,-39, 
  /* [5][0][][] */ 127,-23,66,61,-69,-7,4,-25, 
  /* [6][0][][] */ 24,34,127,-25,41,-34,-42,30, 
  /* [7][0][][] */ 28,4,-127,-36,-43,93,92,-75, 
  /* [8][0][][] */ -4,127,-34,14,62,110,44,59, 
  /* [9][0][][] */ -4,127,-63,94,12,-111,44,123, 
  /* [10][0][][] */ 3,-127,-1,-29,-78,-120,-55,-81, 
  /* [11][0][][] */ -127,-76,106,48,-5,-62,100,62, 
  /* [12][0][][] */ -27,47,-127,82,37,-53,-71,99, 
  /* [13][0][][] */ 88,-127,90,78,7,31,35,-57, 
  /* [14][0][][] */ -31,88,-40,-127,-30,-110,-30,-57, 
  /* [15][0][][] */ 44,117,30,-16,40,-64,101,-127, 
  /* [16][0][][] */ -114,-127,-56,100,-58,28,-18,83, 
  /* [17][0][][] */ -22,-106,-127,82,-57,76,-53,72, 
  /* [18][0][][] */ -101,-74,-48,98,-13,76,-3,127, 
  /* [19][0][][] */ 63,-121,105,-127,15,-65,33,-33, 
  /* [20][0][][] */ -4,74,31,13,43,127,75,-12, 
  /* [21][0][][] */ 27,112,47,-32,40,-69,96,-127, 
  /* [22][0][][] */ 23,14,105,17,-8,127,35,-38, 
  /* [23][0][][] */ -97,-62,35,-72,94,100,-59,-127, 
  /* [24][0][][] */ -94,-93,31,-87,104,102,-49,-127, 
  /* [25][0][][] */ 127,9,-58,-16,15,31,-60,-10, 
  /* [26][0][][] */ -127,-37,-120,-24,-52,-31,21,-3, 
  /* [27][0][][] */ 82,36,-3,-61,-127,-26,87,91, 
  /* [28][0][][] */ -127,-88,5,49,-74,-104,7,0, 
  /* [29][0][][] */ 125,104,45,-127,25,14,-64,-99, 
  /* [30][0][][] */ -83,-64,40,-70,78,90,-48,-127, 
  /* [31][0][][] */ 50,47,-7,127,6,-71,6,9, 
  /* [32][0][][] */ -26,127,-8,36,24,71,-17,47, 
  /* [33][0][][] */ -35,127,-73,26,21,-32,-24,-1, 
  /* [34][0][][] */ -127,-107,-50,96,-13,12,18,102, 
  /* [35][0][][] */ -52,127,-32,-4,67,104,51,69, 
  /* [36][0][][] */ 73,30,2,-49,-127,-33,106,107, 
  /* [37][0][][] */ -66,111,30,21,-127,110,-24,-98, 
  /* [38][0][][] */ 38,32,28,24,127,72,106,53, 
  /* [39][0][][] */ -21,-64,34,-20,14,40,-95,127, 
  /* [40][0][][] */ -74,-53,-68,127,-28,4,8,71, 
  /* [41][0][][] */ 127,15,61,106,-45,-9,-7,-18, 
  /* [42][0][][] */ -43,11,-68,-127,57,-106,8,84, 
  /* [43][0][][] */ 22,-5,86,-6,35,127,91,7, 
  /* [44][0][][] */ -28,-27,-72,127,48,9,-40,-41, 
  /* [45][0][][] */ 70,127,116,-125,48,-65,19,-123, 
  /* [46][0][][] */ -33,-127,-39,29,-10,37,-67,118, 
  /* [47][0][][] */ 37,48,122,-1,95,121,127,-20, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045093563385307789, 0.0042010718025267124, 0.0027281849179416895, 0.0037314342334866524, 0.00072590389754623175, 0.0032341443002223969, 0.0051259989850223064, 0.0021051536314189434, 0.003072547260671854, 0.0057653998956084251, 0.0032162037678062916, 0.0029668163042515516, 0.0023969248868525028, 0.0037908165249973536, 0.0030634738504886627, 0.0032237609848380089, 0.002424358855932951, 0.00091741501819342375, 0.0023683372419327497, 0.0036093671806156635, 0.0043401890434324741, 0.0019626643043011427, 0.0049775885418057442, 0.0039974800311028957, 0.0055524008348584175, 0.0074449251405894756, 0.003406555624678731, 0.0095781413838267326, 0.0026060754898935556, 0.00069388223346322775, 0.0040188226848840714, 0.0080640781670808792, 0.0039559290744364262, 0.0040427325293421745, 0.003149113617837429, 0.0035064006224274635, 0.0046493527479469776, 0.0068514305166900158, 0.0044425302185118198, 0.0050048083066940308, 0.0035496358759701252, 0.0031736537348479033, 0.0033962775487452745, 0.0050727510824799538, 0.0043430519290268421, 0.0022691274061799049, 0.0028722446877509356, 0.003610128303989768, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7507, -2866, 12114, -9955, 22476, 7750, -9170, 11576, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018327795260120183, 0.0002482507552485913, 0.0001841734629124403, 0.00025694372016005218, 0.00021944225591141731, 0.00016266993770841509, 0.00018554081907495856, 0.00028069430845789611, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -14,-14,-21,-66,-27,-35,21,-18,37,9,-31,-4,111,127,-20,-108, 
  /* [1][0][][] */ 127,-58,-41,15,-45,73,-68,-45,-38,84,-32,-50,-8,3,-62,-18, 
  /* [2][0][][] */ -34,-95,43,40,49,-54,-80,-23,28,-87,27,-127,44,-23,-76,24, 
  /* [3][0][][] */ 38,12,15,17,-13,70,-53,-20,127,47,10,24,2,-13,11,22, 
  /* [4][0][][] */ -93,-35,-23,-127,-8,42,52,-118,33,-16,-46,-36,-121,31,-37,-24, 
  /* [5][0][][] */ 85,53,67,-25,43,-48,-127,-119,-19,-75,67,50,-59,50,66,-47, 
  /* [6][0][][] */ 107,38,-124,-74,28,-72,7,-91,-43,22,-127,94,90,-90,6,73, 
  /* [7][0][][] */ -127,-5,99,-29,-67,3,-3,-62,-53,64,86,-34,61,-26,30,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077893128618597984, 0.010550656355917454, 0.0078273722901940346, 0.010920108295977116, 0.0093262959271669388, 0.0069134719669818878, 0.0078854849562048912, 0.011929508298635483, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 18368, -410, 148, 2904, -957, 114, 10031, 1281, -1166, 194, -2154, 1895, -172, -597, -224, -975, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012565952783916146, 0.00032694751280359924, 0.00017034953634720296, 0.00016396277351304889, 0.0012962068431079388, 0.0010149200679734349, 0.00016860406321939081, 0.0010888066608458757, 0.00039108260534703732, 0.0011380491778254509, 0.00027024769224226475, 0.00031605976982973516, 0.00010755227413028479, 0.00023221474839374423, 0.00033137228456325829, 0.00066680449526757002, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 3,-4,4,3,-19,12,7,15,-4,-11,-1,-9,-2,-7,-1,0, 7,-5,2,2,14,-1,10,-27,-6,9,-5,88,-8,20,3,1, 2,-6,-5,1,2,-13,-4,10,3,2,-4,-9,2,-4,-5,0, 
  /* [0][1][][] */ 13,-11,2,2,127,-24,-127,-22,127,127,0,-6,111,-23,-2,-18, -127,127,127,-1,-86,-91,-17,-103,15,-105,127,127,127,127,127,127, 21,-4,-4,0,-10,127,1,-10,-2,-12,-5,-6,10,-3,-14,-8, 
  /* [0][2][][] */ 1,-4,-1,-16,-18,16,53,6,-9,-8,-1,-2,-6,2,-5,-10, 22,-16,-4,-127,7,-15,-9,127,-6,1,3,-16,-10,-56,-10,-35, 3,-5,-3,-4,1,-4,-1,-3,-1,2,-2,-1,0,-4,-8,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0053405296057462692, 0.013895268552005291, 0.0072398553602397442, 0.0069684176705777645, 0.055088788270950317, 0.043134100735187531, 0.0071656722575426102, 0.046274282038211823, 0.01662101037800312, 0.048367086797952652, 0.011485526338219643, 0.013432539999485016, 0.0045709717087447643, 0.0098691266030073166, 0.014083321206271648, 0.028339190408587456, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1426, 247, 80, 541, 60593, 46631, 4828, 22361, 6546, 17260, 1543, -100, 8439, 17103, 164, 23286, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00017873101751320064, 0.00035802184720523655, 0.00019672147755045444, 0.0001469674170948565, 2.1233598090475425e-05, 2.8411262974259444e-05, 0.00011947055463679135, 2.2428659576689824e-05, 0.00012144038919359446, 2.9658431230927818e-05, 0.00028963040676899254, 0.00027716479962691665, 0.0002018363302340731, 1.4295018445409369e-05, 0.00027329582371748984, 2.862786095647607e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -37, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -93, -78, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 28, -53, 3, 
  /* [4][1][][] */ 24, -127, 2, 
  /* [4][2][][] */ 13, -85, -13, 
  /* [5][0][][] */ -61, 31, 0, 
  /* [5][1][][] */ -127, 35, 4, 
  /* [5][2][][] */ -85, 27, 0, 
  /* [6][0][][] */ -16, 80, 127, 
  /* [6][1][][] */ -49, 56, -15, 
  /* [6][2][][] */ -35, -50, -87, 
  /* [7][0][][] */ 41, 30, -13, 
  /* [7][1][][] */ 127, 67, -8, 
  /* [7][2][][] */ 28, 0, -28, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -24, 50, -10, 
  /* [9][1][][] */ -18, 127, -11, 
  /* [9][2][][] */ -8, 89, -6, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -84, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 77, 18, -14, 
  /* [13][1][][] */ 127, 103, -10, 
  /* [13][2][][] */ 80, 113, 41, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -89, -29, 18, 
  /* [15][1][][] */ -127, -124, 15, 
  /* [15][2][][] */ -25, -77, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.083110347390174866, 0.16648100316524506, 0.091475948691368103, 0.068340197205543518, 0.0098736733198165894, 0.013211304321885109, 0.055554088205099106, 0.010429379530251026, 0.05647006630897522, 0.013791240751743317, 0.13467882573604584, 0.12888228893280029, 0.093854367733001709, 0.0066472170874476433, 0.1270831972360611, 0.013312023133039474, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.067509807646274567, } };
const TfArray<1, int> quant46_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.050179619342088699, } };
const TfArray<1, int> quant50_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.021464807912707329, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.038523085415363312, } };
const TfArray<1, int> quant53_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.062176574021577835, } };
const TfArray<1, int> quant54_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.018745599314570427, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.018745599314570427, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.016978643834590912, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.04021868109703064, } };
const TfArray<1, int> quant58_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.015572152100503445, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.018950670957565308, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.03581947460770607, } };
const TfArray<1, int> quant61_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.053919326514005661, } };
const TfArray<1, int> quant62_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.021564476191997528, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020820444449782372, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.044589821249246597, } };
const TfArray<1, int> quant65_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.084705643355846405, } };
const TfArray<1, int> quant66_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.022404281422495842, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.034778695553541183, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.057612963020801544, } };
const TfArray<1, int> quant69_zero = { 1, { -45 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
